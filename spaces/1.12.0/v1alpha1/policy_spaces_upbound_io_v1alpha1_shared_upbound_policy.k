"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""
import regex
import k8s.apimachinery.pkg.apis.meta.v1
_regex_match = regex.match


schema SharedUpboundPolicy:
    r"""
    SharedUpboundPolicy specifies a shared Kyverno policy projected into the specified
    ControlPlanes of the same namespace as SharedUpboundPolicy.

    Attributes
    ----------
    apiVersion : str, default is "policy.spaces.upbound.io/v1alpha1", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "SharedUpboundPolicy", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, optional
        metadata
    spec : PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpec, default is Undefined, optional
        spec
    status : PolicySpacesUpboundIoV1alpha1SharedUpboundPolicyStatus, default is Undefined, optional
        status
    """


    apiVersion: "policy.spaces.upbound.io/v1alpha1" = "policy.spaces.upbound.io/v1alpha1"

    kind: "SharedUpboundPolicy" = "SharedUpboundPolicy"

    metadata?: v1.ObjectMeta

    spec?: PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpec

    status?: PolicySpacesUpboundIoV1alpha1SharedUpboundPolicyStatus


schema PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpec:
    r"""
    SharedUpboundPolicySpec defines the desired state of SharedUpboundPolicy.

    Attributes
    ----------
    admission : bool, default is True, optional
        Admission controls if rules are applied during admission.
        Optional. Default value is "true".
    applyRules : str, default is Undefined, optional
        ApplyRules controls how rules in a policy are applied. Rule are processed in
        the order of declaration. When set to `One` processing stops after a rule has
        been applied i.e. the rule matches and results in a pass, fail, or error. When
        set to `All` all rules in the policy are processed. The default is `All`.
    background : bool, default is True, optional
        Background controls if rules are applied to existing resources during a background scan.
        Optional. Default value is "true". The value must be set to "false" if the policy rule
        uses variables that are only available in the admission review request (e.g. user name).
    controlPlaneSelector : PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecControlPlaneSelector, default is Undefined, required
        control plane selector
    failurePolicy : str, default is Undefined, optional
        FailurePolicy defines how unexpected policy errors and webhook response timeout errors are handled.
        Rules within the same policy share the same failure behavior.
        This field should not be accessed directly, instead `GetFailurePolicy()` should be used.
        Allowed values are Ignore or Fail. Defaults to Fail.
    generateExisting : bool, default is Undefined, optional
        GenerateExisting controls whether to trigger generate rule in existing resources
        If is set to "true" generate rule will be triggered and applied to existing matched resources.
        Defaults to "false" if not specified.
    generateExistingOnPolicyUpdate : bool, default is Undefined, optional
        Deprecated, use generateExisting instead
    mutateExistingOnPolicyUpdate : bool, default is Undefined, optional
        MutateExistingOnPolicyUpdate controls if a mutateExisting policy is applied on policy events.
        Default value is "false".
    policyMetadata : PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecPolicyMetadata, default is Undefined, optional
        policy metadata
    policyName : str, default is Undefined, optional
        PolicyName is the name to use when creating policy within a control plane.
        optional, if not set, SharedUpboundPolicy name will be used.
        When set, it is immutable.
    rules : [PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0], default is Undefined, optional
        Rules is a list of Rule instances. A Policy contains multiple rules and
        each rule can validate, mutate, or generate resources.
    schemaValidation : bool, default is Undefined, optional
        SchemaValidation skips validation checks for policies as well as patched resources.
        Optional. The default value is set to "true", it must be set to "false" to disable the validation checks.
    useServerSideApply : bool, default is Undefined, optional
        UseServerSideApply controls whether to use server-side apply for generate rules
        If is set to "true" create & update for generate rules will use apply instead of create/update.
        Defaults to "false" if not specified.
    validationFailureAction : str, default is "Audit", optional
        ValidationFailureAction defines if a validation policy rule violation should block
        the admission review request (enforce), or allow (audit) the admission review request
        and report an error in a policy report. Optional.
        Allowed values are audit or enforce. The default value is "Audit".
    validationFailureActionOverrides : [PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecValidationFailureActionOverridesItems0], default is Undefined, optional
        ValidationFailureActionOverrides is a Cluster Policy attribute that specifies ValidationFailureAction
        namespace-wise. It overrides ValidationFailureAction for the specified namespaces.
    webhookTimeoutSeconds : int, default is Undefined, optional
        WebhookTimeoutSeconds specifies the maximum time in seconds allowed to apply this policy.
        After the configured time expires, the admission request may fail, or may simply ignore the policy results,
        based on the failure policy. The default timeout is 10s, the value must be between 1 and 30 seconds.
    """


    admission?: bool = True

    applyRules?: "All" | "One"

    background?: bool = True

    controlPlaneSelector: PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecControlPlaneSelector

    failurePolicy?: "Ignore" | "Fail"

    generateExisting?: bool

    generateExistingOnPolicyUpdate?: bool

    mutateExistingOnPolicyUpdate?: bool

    policyMetadata?: PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecPolicyMetadata

    policyName?: str

    rules?: [PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0]

    schemaValidation?: bool

    useServerSideApply?: bool

    validationFailureAction?: "audit" | "enforce" | "Audit" | "Enforce" = "Audit"

    validationFailureActionOverrides?: [PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecValidationFailureActionOverridesItems0]

    webhookTimeoutSeconds?: int


    check:
        len(policyName) <= 253 if policyName
        len(policyName) >= 1 if policyName


schema PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecControlPlaneSelector:
    r"""
    The policy is projected only to control planes
    matching the provided selector. Either names or a labelSelector must be specified.

    Attributes
    ----------
    labelSelectors : [PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecControlPlaneSelectorLabelSelectorsItems0], default is Undefined, optional
        A resource is matched if any of the label selector matches.
        In case when the list is empty, resource is matched too.
    names : [str], default is Undefined, optional
        A resource is selected if its metadata.name matches any of the provided names.
        In case when the list is empty, resource is matched too.
    """


    labelSelectors?: [PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecControlPlaneSelectorLabelSelectorsItems0]

    names?: [str]


schema PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecControlPlaneSelectorLabelSelectorsItems0:
    r"""
    A label selector is a label query over a set of resources. The result of matchLabels and
    matchExpressions are ANDed. An empty label selector matches all objects. A null
    label selector matches no objects.

    Attributes
    ----------
    matchExpressions : [PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecControlPlaneSelectorLabelSelectorsItems0MatchExpressionsItems0], default is Undefined, optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : {str:str}, default is Undefined, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
    """


    matchExpressions?: [PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecControlPlaneSelectorLabelSelectorsItems0MatchExpressionsItems0]

    matchLabels?: {str:str}


schema PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecControlPlaneSelectorLabelSelectorsItems0MatchExpressionsItems0:
    r"""
    A label selector requirement is a selector that contains values, a key, and an operator that
    relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the label key that the selector applies to.
    operator : str, default is Undefined, required
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], default is Undefined, optional
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
    """


    key: str

    operator: str

    values?: [str]


schema PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecPolicyMetadata:
    r"""
    The metadata of the policy to be created.

    Attributes
    ----------
    annotations : {str:str}, default is Undefined, optional
        Annotations that are set on projected resource.
    labels : {str:str}, default is Undefined, optional
        Labels that are set on projected resource.
    """


    annotations?: {str:str}

    labels?: {str:str}


schema PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0:
    r"""
    Rule defines a validation, mutation, or generation control for matching resources.
    Each rules contains a match declaration to select resources, and an optional exclude
    declaration to specify which resources to exclude.

    Attributes
    ----------
    celPreconditions : [PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0CelPreconditionsItems0], default is Undefined, optional
        CELPreconditions are used to determine if a policy rule should be applied by evaluating a
        set of CEL conditions. It can only be used with the validate.cel subrule
    context : [PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ContextItems0], default is Undefined, optional
        Context defines variables and data sources that can be used during rule execution.
    exclude : PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0Exclude, default is Undefined, optional
        exclude
    generate : PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0Generate, default is Undefined, optional
        generate
    imageExtractors : {str:[PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ImageExtractorsItems0]}, default is Undefined, optional
        ImageExtractors defines a mapping from kinds to ImageExtractorConfigs.
        This config is only valid for verifyImages rules.
    match : PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0Match, default is Undefined, optional
        match
    mutate : PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0Mutate, default is Undefined, optional
        mutate
    name : str, default is Undefined, required
        Name is a label to identify the rule, It must be unique within the policy.
    preconditions : any, default is Undefined, optional
        Preconditions are used to determine if a policy rule should be applied by evaluating a
        set of conditions. The declaration can contain nested `any` or `all` statements. A direct list
        of conditions (without `any` or `all` statements is supported for backwards compatibility but
        will be deprecated in the next major release.
        See: https://kyverno.io/docs/writing-policies/preconditions/
    skipBackgroundRequests : bool, default is True, optional
        SkipBackgroundRequests bypasses admission requests that are sent by the background controller.
        The default value is set to "true", it must be set to "false" to apply
        generate and mutateExisting rules to those requests.
    validate : PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0Validate, default is Undefined, optional
        validate
    verifyImages : [PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0VerifyImagesItems0], default is Undefined, optional
        VerifyImages is used to verify image signatures and mutate them to add a digest
    """


    celPreconditions?: [PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0CelPreconditionsItems0]

    context?: [PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ContextItems0]

    exclude?: PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0Exclude

    generate?: PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0Generate

    imageExtractors?: {str:[PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ImageExtractorsItems0]}

    match?: PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0Match

    mutate?: PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0Mutate

    name: str

    preconditions?: any

    skipBackgroundRequests?: bool = True

    validate?: PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0Validate

    verifyImages?: [PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0VerifyImagesItems0]


    check:
        len(name) <= 63


schema PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0CelPreconditionsItems0:
    r"""
    MatchCondition represents a condition which must by fulfilled for a request to be sent to a webhook.

    Attributes
    ----------
    expression : str, default is Undefined, required
        Expression represents the expression which will be evaluated by CEL. Must evaluate to bool.
        CEL expressions have access to the contents of the AdmissionRequest and Authorizer, organized into CEL variables:

        'object' - The object from the incoming request. The value is null for DELETE requests.
        'oldObject' - The existing object. The value is null for CREATE requests.
        'request' - Attributes of the admission request(/pkg/apis/admission/types.go#AdmissionRequest).
        'authorizer' - A CEL Authorizer. May be used to perform authorization checks for the principal (user or service account) of the request.
          See https://pkg.go.dev/k8s.io/apiserver/pkg/cel/library#Authz
        'authorizer.requestResource' - A CEL ResourceCheck constructed from the 'authorizer' and configured with the
          request resource.
        Documentation on CEL: https://kubernetes.io/docs/reference/using-api/cel/

        Required.
    name : str, default is Undefined, required
        Name is an identifier for this match condition, used for strategic merging of MatchConditions,
        as well as providing an identifier for logging purposes. A good name should be descriptive of
        the associated expression.
        Name must be a qualified name consisting of alphanumeric characters, '-', '_' or '.', and
        must start and end with an alphanumeric character (e.g. 'MyName',  or 'my.name',  or
        '123-abc', regex used for validation is '([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9]') with an
        optional DNS subdomain prefix and '/' (e.g. 'example.com/MyName')

        Required.
    """


    expression: str

    name: str


schema PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ContextItems0:
    r"""
    ContextEntry adds variables and data sources to a rule Context. Either a
    ConfigMap reference or a APILookup must be provided.

    Attributes
    ----------
    apiCall : PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ContextItems0APICall, default is Undefined, optional
        api call
    configMap : PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ContextItems0ConfigMap, default is Undefined, optional
        config map
    imageRegistry : PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ContextItems0ImageRegistry, default is Undefined, optional
        image registry
    name : str, default is Undefined, optional
        Name is the variable name.
    variable : PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ContextItems0Variable, default is Undefined, optional
        variable
    """


    apiCall?: PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ContextItems0APICall

    configMap?: PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ContextItems0ConfigMap

    imageRegistry?: PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ContextItems0ImageRegistry

    name?: str

    variable?: PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ContextItems0Variable


schema PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ContextItems0APICall:
    r"""
    APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
    The data returned is stored in the context with the name for the context entry.

    Attributes
    ----------
    data : [PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ContextItems0APICallDataItems0], default is Undefined, optional
        Data specifies the POST data sent to the server.
    jmesPath : str, default is Undefined, optional
        JMESPath is an optional JSON Match Expression that can be used to
        transform the JSON response returned from the server. For example
        a JMESPath of "items | length(@)" applied to the API server response
        for the URLPath "/apis/apps/v1/deployments" will return the total count
        of deployments across all namespaces.
    method : str, default is "GET", optional
        Method is the HTTP request type (GET or POST).
    service : PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ContextItems0APICallService, default is Undefined, optional
        service
    urlPath : str, default is Undefined, optional
        URLPath is the URL path to be used in the HTTP GET or POST request to the
        Kubernetes API server (e.g. "/api/v1/namespaces" or  "/apis/apps/v1/deployments").
        The format required is the same format used by the `kubectl get --raw` command.
        See https://kyverno.io/docs/writing-policies/external-data-sources/#variables-from-kubernetes-api-server-calls
        for details.
    """


    data?: [PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ContextItems0APICallDataItems0]

    jmesPath?: str

    method?: "GET" | "POST" = "GET"

    service?: PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ContextItems0APICallService

    urlPath?: str


schema PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ContextItems0APICallDataItems0:
    r"""
    RequestData contains the HTTP POST data

    Attributes
    ----------
    key : str, default is Undefined, required
        Key is a unique identifier for the data value
    value : any, default is Undefined, required
        Value is the data value
    """


    key: str

    value: any


schema PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ContextItems0APICallService:
    r"""
    Service is an API call to a JSON web service

    Attributes
    ----------
    caBundle : str, default is Undefined, optional
        CABundle is a PEM encoded CA bundle which will be used to validate
        the server certificate.
    url : str, default is Undefined, required
        URL is the JSON web service URL. A typical form is
        `https://{service}.{namespace}:{port}/{path}`.
    """


    caBundle?: str

    url: str


schema PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ContextItems0ConfigMap:
    r"""
    ConfigMap is the ConfigMap reference.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name is the ConfigMap name.
    namespace : str, default is Undefined, optional
        Namespace is the ConfigMap namespace.
    """


    name: str

    namespace?: str


schema PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ContextItems0ImageRegistry:
    r"""
    ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
    details.

    Attributes
    ----------
    imageRegistryCredentials : PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ContextItems0ImageRegistryImageRegistryCredentials, default is Undefined, optional
        image registry credentials
    jmesPath : str, default is Undefined, optional
        JMESPath is an optional JSON Match Expression that can be used to
        transform the ImageData struct returned as a result of processing
        the image reference.
    reference : str, default is Undefined, required
        Reference is image reference to a container image in the registry.
        Example: ghcr.io/kyverno/kyverno:latest
    """


    imageRegistryCredentials?: PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ContextItems0ImageRegistryImageRegistryCredentials

    jmesPath?: str

    reference: str


schema PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ContextItems0ImageRegistryImageRegistryCredentials:
    r"""
    ImageRegistryCredentials provides credentials that will be used for authentication with registry

    Attributes
    ----------
    allowInsecureRegistry : bool, default is Undefined, optional
        AllowInsecureRegistry allows insecure access to a registry.
    providers : [str], default is Undefined, optional
        Providers specifies a list of OCI Registry names, whose authentication providers are provided.
        It can be of one of these values: default,google,azure,amazon,github.
    secrets : [str], default is Undefined, optional
        Secrets specifies a list of secrets that are provided for credentials.
        Secrets must live in the Kyverno namespace.
    """


    allowInsecureRegistry?: bool

    providers?: [str]

    secrets?: [str]


schema PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ContextItems0Variable:
    r"""
    Variable defines an arbitrary JMESPath context variable that can be defined inline.

    Attributes
    ----------
    default : any, default is Undefined, optional
        Default is an optional arbitrary JSON object that the variable may take if the JMESPath
        expression evaluates to nil
    jmesPath : str, default is Undefined, optional
        JMESPath is an optional JMESPath Expression that can be used to
        transform the variable.
    value : any, default is Undefined, optional
        Value is any arbitrary JSON object representable in YAML or JSON form.
    """


    default?: any

    jmesPath?: str

    value?: any


schema PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0Exclude:
    r"""
    ExcludeResources defines when this policy rule should not be applied. The exclude
    criteria can include resource information (e.g. kind, name, namespace, labels)
    and admission review request information like the name or role.

    Attributes
    ----------
    $all : [PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ExcludeAllItems0], default is Undefined, optional
        All allows specifying resources which will be ANDed
    any : [PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ExcludeAnyItems0], default is Undefined, optional
        Any allows specifying resources which will be ORed
    clusterRoles : [str], default is Undefined, optional
        ClusterRoles is the list of cluster-wide role names for the user.
    resources : PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ExcludeResources, default is Undefined, optional
        resources
    roles : [str], default is Undefined, optional
        Roles is the list of namespaced role names for the user.
    subjects : [PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ExcludeSubjectsItems0], default is Undefined, optional
        Subjects is the list of subject names like users, user groups, and service accounts.
    """


    $all?: [PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ExcludeAllItems0]

    any?: [PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ExcludeAnyItems0]

    clusterRoles?: [str]

    resources?: PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ExcludeResources

    roles?: [str]

    subjects?: [PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ExcludeSubjectsItems0]


schema PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ExcludeAllItems0:
    r"""
    ResourceFilter allow users to "AND" or "OR" between resources

    Attributes
    ----------
    clusterRoles : [str], default is Undefined, optional
        ClusterRoles is the list of cluster-wide role names for the user.
    resources : PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ExcludeAllItems0Resources, default is Undefined, optional
        resources
    roles : [str], default is Undefined, optional
        Roles is the list of namespaced role names for the user.
    subjects : [PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ExcludeAllItems0SubjectsItems0], default is Undefined, optional
        Subjects is the list of subject names like users, user groups, and service accounts.
    """


    clusterRoles?: [str]

    resources?: PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ExcludeAllItems0Resources

    roles?: [str]

    subjects?: [PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ExcludeAllItems0SubjectsItems0]


schema PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ExcludeAllItems0Resources:
    r"""
    ResourceDescription contains information about the resource being created or modified.

    Attributes
    ----------
    annotations : {str:str}, default is Undefined, optional
        Annotations is a  map of annotations (key-value pairs of type string). Annotation keys
        and values support the wildcard characters "*" (matches zero or many characters) and
        "?" (matches at least one character).
    kinds : [str], default is Undefined, optional
        Kinds is a list of resource kinds.
    name : str, default is Undefined, optional
        Name is the name of the resource. The name supports wildcard characters
        "*" (matches zero or many characters) and "?" (at least one character).
        NOTE: "Name" is being deprecated in favor of "Names".
    names : [str], default is Undefined, optional
        Names are the names of the resources. Each name supports wildcard characters
        "*" (matches zero or many characters) and "?" (at least one character).
    namespaceSelector : PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ExcludeAllItems0ResourcesNamespaceSelector, default is Undefined, optional
        namespace selector
    namespaces : [str], default is Undefined, optional
        Namespaces is a list of namespaces names. Each name supports wildcard characters
        "*" (matches zero or many characters) and "?" (at least one character).
    operations : [str], default is Undefined, optional
        Operations can contain values ["CREATE, "UPDATE", "CONNECT", "DELETE"], which are used to match a specific action.
    selector : PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ExcludeAllItems0ResourcesSelector, default is Undefined, optional
        selector
    """


    annotations?: {str:str}

    kinds?: [str]

    name?: str

    names?: [str]

    namespaceSelector?: PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ExcludeAllItems0ResourcesNamespaceSelector

    namespaces?: [str]

    operations?: [str]

    selector?: PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ExcludeAllItems0ResourcesSelector


schema PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ExcludeAllItems0ResourcesNamespaceSelector:
    r"""
    NamespaceSelector is a label selector for the resource namespace. Label keys and values
    in `matchLabels` support the wildcard characters `*` (matches zero or many characters)
    and `?` (matches one character).Wildcards allows writing label selectors like
    ["storage.k8s.io/*": "*"]. Note that using ["*" : "*"] matches any key and value but
    does not match an empty label set.

    Attributes
    ----------
    matchExpressions : [PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ExcludeAllItems0ResourcesNamespaceSelectorMatchExpressionsItems0], default is Undefined, optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : {str:str}, default is Undefined, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
    """


    matchExpressions?: [PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ExcludeAllItems0ResourcesNamespaceSelectorMatchExpressionsItems0]

    matchLabels?: {str:str}


schema PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ExcludeAllItems0ResourcesNamespaceSelectorMatchExpressionsItems0:
    r"""
    A label selector requirement is a selector that contains values, a key, and an operator that
    relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the label key that the selector applies to.
    operator : str, default is Undefined, required
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], default is Undefined, optional
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
    """


    key: str

    operator: str

    values?: [str]


schema PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ExcludeAllItems0ResourcesSelector:
    r"""
    Selector is a label selector. Label keys and values in `matchLabels` support the wildcard
    characters `*` (matches zero or many characters) and `?` (matches one character).
    Wildcards allows writing label selectors like ["storage.k8s.io/*": "*"]. Note that
    using ["*" : "*"] matches any key and value but does not match an empty label set.

    Attributes
    ----------
    matchExpressions : [PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ExcludeAllItems0ResourcesSelectorMatchExpressionsItems0], default is Undefined, optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : {str:str}, default is Undefined, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
    """


    matchExpressions?: [PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ExcludeAllItems0ResourcesSelectorMatchExpressionsItems0]

    matchLabels?: {str:str}


schema PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ExcludeAllItems0ResourcesSelectorMatchExpressionsItems0:
    r"""
    A label selector requirement is a selector that contains values, a key, and an operator that
    relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the label key that the selector applies to.
    operator : str, default is Undefined, required
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], default is Undefined, optional
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
    """


    key: str

    operator: str

    values?: [str]


schema PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ExcludeAllItems0SubjectsItems0:
    r"""
    Subject contains a reference to the object or user identities a role binding applies to.  This can either hold a direct API object reference,
    or a value for non-objects such as user and group names.

    Attributes
    ----------
    apiGroup : str, default is Undefined, optional
        APIGroup holds the API group of the referenced subject.
        Defaults to "" for ServiceAccount subjects.
        Defaults to "rbac.authorization.k8s.io" for User and Group subjects.
    kind : str, default is Undefined, required
        Kind of object being referenced. Values defined by this API group are "User", "Group", and "ServiceAccount".
        If the Authorizer does not recognized the kind value, the Authorizer should report an error.
    name : str, default is Undefined, required
        Name of the object being referenced.
    namespace : str, default is Undefined, optional
        Namespace of the referenced object.  If the object kind is non-namespace, such as "User" or "Group", and this value is not empty
        the Authorizer should report an error.
    """


    apiGroup?: str

    kind: str

    name: str

    namespace?: str


schema PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ExcludeAnyItems0:
    r"""
    ResourceFilter allow users to "AND" or "OR" between resources

    Attributes
    ----------
    clusterRoles : [str], default is Undefined, optional
        ClusterRoles is the list of cluster-wide role names for the user.
    resources : PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ExcludeAnyItems0Resources, default is Undefined, optional
        resources
    roles : [str], default is Undefined, optional
        Roles is the list of namespaced role names for the user.
    subjects : [PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ExcludeAnyItems0SubjectsItems0], default is Undefined, optional
        Subjects is the list of subject names like users, user groups, and service accounts.
    """


    clusterRoles?: [str]

    resources?: PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ExcludeAnyItems0Resources

    roles?: [str]

    subjects?: [PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ExcludeAnyItems0SubjectsItems0]


schema PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ExcludeAnyItems0Resources:
    r"""
    ResourceDescription contains information about the resource being created or modified.

    Attributes
    ----------
    annotations : {str:str}, default is Undefined, optional
        Annotations is a  map of annotations (key-value pairs of type string). Annotation keys
        and values support the wildcard characters "*" (matches zero or many characters) and
        "?" (matches at least one character).
    kinds : [str], default is Undefined, optional
        Kinds is a list of resource kinds.
    name : str, default is Undefined, optional
        Name is the name of the resource. The name supports wildcard characters
        "*" (matches zero or many characters) and "?" (at least one character).
        NOTE: "Name" is being deprecated in favor of "Names".
    names : [str], default is Undefined, optional
        Names are the names of the resources. Each name supports wildcard characters
        "*" (matches zero or many characters) and "?" (at least one character).
    namespaceSelector : PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ExcludeAnyItems0ResourcesNamespaceSelector, default is Undefined, optional
        namespace selector
    namespaces : [str], default is Undefined, optional
        Namespaces is a list of namespaces names. Each name supports wildcard characters
        "*" (matches zero or many characters) and "?" (at least one character).
    operations : [str], default is Undefined, optional
        Operations can contain values ["CREATE, "UPDATE", "CONNECT", "DELETE"], which are used to match a specific action.
    selector : PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ExcludeAnyItems0ResourcesSelector, default is Undefined, optional
        selector
    """


    annotations?: {str:str}

    kinds?: [str]

    name?: str

    names?: [str]

    namespaceSelector?: PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ExcludeAnyItems0ResourcesNamespaceSelector

    namespaces?: [str]

    operations?: [str]

    selector?: PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ExcludeAnyItems0ResourcesSelector


schema PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ExcludeAnyItems0ResourcesNamespaceSelector:
    r"""
    NamespaceSelector is a label selector for the resource namespace. Label keys and values
    in `matchLabels` support the wildcard characters `*` (matches zero or many characters)
    and `?` (matches one character).Wildcards allows writing label selectors like
    ["storage.k8s.io/*": "*"]. Note that using ["*" : "*"] matches any key and value but
    does not match an empty label set.

    Attributes
    ----------
    matchExpressions : [PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ExcludeAnyItems0ResourcesNamespaceSelectorMatchExpressionsItems0], default is Undefined, optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : {str:str}, default is Undefined, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
    """


    matchExpressions?: [PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ExcludeAnyItems0ResourcesNamespaceSelectorMatchExpressionsItems0]

    matchLabels?: {str:str}


schema PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ExcludeAnyItems0ResourcesNamespaceSelectorMatchExpressionsItems0:
    r"""
    A label selector requirement is a selector that contains values, a key, and an operator that
    relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the label key that the selector applies to.
    operator : str, default is Undefined, required
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], default is Undefined, optional
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
    """


    key: str

    operator: str

    values?: [str]


schema PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ExcludeAnyItems0ResourcesSelector:
    r"""
    Selector is a label selector. Label keys and values in `matchLabels` support the wildcard
    characters `*` (matches zero or many characters) and `?` (matches one character).
    Wildcards allows writing label selectors like ["storage.k8s.io/*": "*"]. Note that
    using ["*" : "*"] matches any key and value but does not match an empty label set.

    Attributes
    ----------
    matchExpressions : [PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ExcludeAnyItems0ResourcesSelectorMatchExpressionsItems0], default is Undefined, optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : {str:str}, default is Undefined, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
    """


    matchExpressions?: [PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ExcludeAnyItems0ResourcesSelectorMatchExpressionsItems0]

    matchLabels?: {str:str}


schema PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ExcludeAnyItems0ResourcesSelectorMatchExpressionsItems0:
    r"""
    A label selector requirement is a selector that contains values, a key, and an operator that
    relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the label key that the selector applies to.
    operator : str, default is Undefined, required
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], default is Undefined, optional
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
    """


    key: str

    operator: str

    values?: [str]


schema PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ExcludeAnyItems0SubjectsItems0:
    r"""
    Subject contains a reference to the object or user identities a role binding applies to.  This can either hold a direct API object reference,
    or a value for non-objects such as user and group names.

    Attributes
    ----------
    apiGroup : str, default is Undefined, optional
        APIGroup holds the API group of the referenced subject.
        Defaults to "" for ServiceAccount subjects.
        Defaults to "rbac.authorization.k8s.io" for User and Group subjects.
    kind : str, default is Undefined, required
        Kind of object being referenced. Values defined by this API group are "User", "Group", and "ServiceAccount".
        If the Authorizer does not recognized the kind value, the Authorizer should report an error.
    name : str, default is Undefined, required
        Name of the object being referenced.
    namespace : str, default is Undefined, optional
        Namespace of the referenced object.  If the object kind is non-namespace, such as "User" or "Group", and this value is not empty
        the Authorizer should report an error.
    """


    apiGroup?: str

    kind: str

    name: str

    namespace?: str


schema PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ExcludeResources:
    r"""
    ResourceDescription contains information about the resource being created or modified.
    Requires at least one tag to be specified when under MatchResources.
    Specifying ResourceDescription directly under match is being deprecated.
    Please specify under "any" or "all" instead.

    Attributes
    ----------
    annotations : {str:str}, default is Undefined, optional
        Annotations is a  map of annotations (key-value pairs of type string). Annotation keys
        and values support the wildcard characters "*" (matches zero or many characters) and
        "?" (matches at least one character).
    kinds : [str], default is Undefined, optional
        Kinds is a list of resource kinds.
    name : str, default is Undefined, optional
        Name is the name of the resource. The name supports wildcard characters
        "*" (matches zero or many characters) and "?" (at least one character).
        NOTE: "Name" is being deprecated in favor of "Names".
    names : [str], default is Undefined, optional
        Names are the names of the resources. Each name supports wildcard characters
        "*" (matches zero or many characters) and "?" (at least one character).
    namespaceSelector : PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ExcludeResourcesNamespaceSelector, default is Undefined, optional
        namespace selector
    namespaces : [str], default is Undefined, optional
        Namespaces is a list of namespaces names. Each name supports wildcard characters
        "*" (matches zero or many characters) and "?" (at least one character).
    operations : [str], default is Undefined, optional
        Operations can contain values ["CREATE, "UPDATE", "CONNECT", "DELETE"], which are used to match a specific action.
    selector : PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ExcludeResourcesSelector, default is Undefined, optional
        selector
    """


    annotations?: {str:str}

    kinds?: [str]

    name?: str

    names?: [str]

    namespaceSelector?: PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ExcludeResourcesNamespaceSelector

    namespaces?: [str]

    operations?: [str]

    selector?: PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ExcludeResourcesSelector


schema PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ExcludeResourcesNamespaceSelector:
    r"""
    NamespaceSelector is a label selector for the resource namespace. Label keys and values
    in `matchLabels` support the wildcard characters `*` (matches zero or many characters)
    and `?` (matches one character).Wildcards allows writing label selectors like
    ["storage.k8s.io/*": "*"]. Note that using ["*" : "*"] matches any key and value but
    does not match an empty label set.

    Attributes
    ----------
    matchExpressions : [PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ExcludeResourcesNamespaceSelectorMatchExpressionsItems0], default is Undefined, optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : {str:str}, default is Undefined, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
    """


    matchExpressions?: [PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ExcludeResourcesNamespaceSelectorMatchExpressionsItems0]

    matchLabels?: {str:str}


schema PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ExcludeResourcesNamespaceSelectorMatchExpressionsItems0:
    r"""
    A label selector requirement is a selector that contains values, a key, and an operator that
    relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the label key that the selector applies to.
    operator : str, default is Undefined, required
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], default is Undefined, optional
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
    """


    key: str

    operator: str

    values?: [str]


schema PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ExcludeResourcesSelector:
    r"""
    Selector is a label selector. Label keys and values in `matchLabels` support the wildcard
    characters `*` (matches zero or many characters) and `?` (matches one character).
    Wildcards allows writing label selectors like ["storage.k8s.io/*": "*"]. Note that
    using ["*" : "*"] matches any key and value but does not match an empty label set.

    Attributes
    ----------
    matchExpressions : [PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ExcludeResourcesSelectorMatchExpressionsItems0], default is Undefined, optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : {str:str}, default is Undefined, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
    """


    matchExpressions?: [PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ExcludeResourcesSelectorMatchExpressionsItems0]

    matchLabels?: {str:str}


schema PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ExcludeResourcesSelectorMatchExpressionsItems0:
    r"""
    A label selector requirement is a selector that contains values, a key, and an operator that
    relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the label key that the selector applies to.
    operator : str, default is Undefined, required
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], default is Undefined, optional
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
    """


    key: str

    operator: str

    values?: [str]


schema PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ExcludeSubjectsItems0:
    r"""
    Subject contains a reference to the object or user identities a role binding applies to.  This can either hold a direct API object reference,
    or a value for non-objects such as user and group names.

    Attributes
    ----------
    apiGroup : str, default is Undefined, optional
        APIGroup holds the API group of the referenced subject.
        Defaults to "" for ServiceAccount subjects.
        Defaults to "rbac.authorization.k8s.io" for User and Group subjects.
    kind : str, default is Undefined, required
        Kind of object being referenced. Values defined by this API group are "User", "Group", and "ServiceAccount".
        If the Authorizer does not recognized the kind value, the Authorizer should report an error.
    name : str, default is Undefined, required
        Name of the object being referenced.
    namespace : str, default is Undefined, optional
        Namespace of the referenced object.  If the object kind is non-namespace, such as "User" or "Group", and this value is not empty
        the Authorizer should report an error.
    """


    apiGroup?: str

    kind: str

    name: str

    namespace?: str


schema PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0Generate:
    r"""
    Generation is used to create new resources.

    Attributes
    ----------
    apiVersion : str, default is Undefined, optional
        APIVersion specifies resource apiVersion.
    clone : PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0GenerateClone, default is Undefined, optional
        clone
    cloneList : PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0GenerateCloneList, default is Undefined, optional
        clone list
    data : any, default is Undefined, optional
        Data provides the resource declaration used to populate each generated resource.
        At most one of Data or Clone must be specified. If neither are provided, the generated
        resource will be created with default data only.
    kind : str, default is Undefined, optional
        Kind specifies resource kind.
    name : str, default is Undefined, optional
        Name specifies the resource name.
    namespace : str, default is Undefined, optional
        Namespace specifies resource namespace.
    synchronize : bool, default is Undefined, optional
        Synchronize controls if generated resources should be kept in-sync with their source resource.
        If Synchronize is set to "true" changes to generated resources will be overwritten with resource
        data from Data or the resource specified in the Clone declaration.
        Optional. Defaults to "false" if not specified.
    uid : str, default is Undefined, optional
        UID specifies the resource uid.
    """


    apiVersion?: str

    clone?: PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0GenerateClone

    cloneList?: PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0GenerateCloneList

    data?: any

    kind?: str

    name?: str

    namespace?: str

    synchronize?: bool

    uid?: str


schema PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0GenerateClone:
    r"""
    Clone specifies the source resource used to populate each generated resource.
    At most one of Data or Clone can be specified. If neither are provided, the generated
    resource will be created with default data only.

    Attributes
    ----------
    name : str, default is Undefined, optional
        Name specifies name of the resource.
    namespace : str, default is Undefined, optional
        Namespace specifies source resource namespace.
    """


    name?: str

    namespace?: str


schema PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0GenerateCloneList:
    r"""
    CloneList specifies the list of source resource used to populate each generated resource.

    Attributes
    ----------
    kinds : [str], default is Undefined, optional
        Kinds is a list of resource kinds.
    namespace : str, default is Undefined, optional
        Namespace specifies source resource namespace.
    selector : PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0GenerateCloneListSelector, default is Undefined, optional
        selector
    """


    kinds?: [str]

    namespace?: str

    selector?: PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0GenerateCloneListSelector


schema PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0GenerateCloneListSelector:
    r"""
    Selector is a label selector. Label keys and values in `matchLabels`.
    wildcard characters are not supported.

    Attributes
    ----------
    matchExpressions : [PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0GenerateCloneListSelectorMatchExpressionsItems0], default is Undefined, optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : {str:str}, default is Undefined, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
    """


    matchExpressions?: [PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0GenerateCloneListSelectorMatchExpressionsItems0]

    matchLabels?: {str:str}


schema PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0GenerateCloneListSelectorMatchExpressionsItems0:
    r"""
    A label selector requirement is a selector that contains values, a key, and an operator that
    relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the label key that the selector applies to.
    operator : str, default is Undefined, required
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], default is Undefined, optional
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
    """


    key: str

    operator: str

    values?: [str]


schema PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ImageExtractorsItems0:
    r"""
    policy spaces upbound io v1alpha1 shared upbound policy spec rules items0 image extractors items0

    Attributes
    ----------
    jmesPath : str, default is Undefined, optional
        JMESPath is an optional JMESPath expression to apply to the image value.
        This is useful when the extracted image begins with a prefix like 'docker://'.
        The 'trim_prefix' function may be used to trim the prefix: trim_prefix(@, 'docker://').
        Note - Image digest mutation may not be used when applying a JMESPAth to an image.
    key : str, default is Undefined, optional
        Key is an optional name of the field within 'path' that will be used to uniquely identify an image.
        Note - this field MUST be unique.
    name : str, default is Undefined, optional
        Name is the entry the image will be available under 'images.<name>' in the context.
        If this field is not defined, image entries will appear under 'images.custom'.
    path : str, default is Undefined, required
        Path is the path to the object containing the image field in a custom resource.
        It should be slash-separated. Each slash-separated key must be a valid YAML key or a wildcard '*'.
        Wildcard keys are expanded in case of arrays or objects.
    value : str, default is Undefined, optional
        Value is an optional name of the field within 'path' that points to the image URI.
        This is useful when a custom 'key' is also defined.
    """


    jmesPath?: str

    key?: str

    name?: str

    path: str

    value?: str


schema PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0Match:
    r"""
    MatchResources defines when this policy rule should be applied. The match
    criteria can include resource information (e.g. kind, name, namespace, labels)
    and admission review request information like the user name or role.
    At least one kind is required.

    Attributes
    ----------
    $all : [PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0MatchAllItems0], default is Undefined, optional
        All allows specifying resources which will be ANDed
    any : [PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0MatchAnyItems0], default is Undefined, optional
        Any allows specifying resources which will be ORed
    clusterRoles : [str], default is Undefined, optional
        ClusterRoles is the list of cluster-wide role names for the user.
    resources : PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0MatchResources, default is Undefined, optional
        resources
    roles : [str], default is Undefined, optional
        Roles is the list of namespaced role names for the user.
    subjects : [PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0MatchSubjectsItems0], default is Undefined, optional
        Subjects is the list of subject names like users, user groups, and service accounts.
    """


    $all?: [PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0MatchAllItems0]

    any?: [PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0MatchAnyItems0]

    clusterRoles?: [str]

    resources?: PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0MatchResources

    roles?: [str]

    subjects?: [PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0MatchSubjectsItems0]


schema PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0MatchAllItems0:
    r"""
    ResourceFilter allow users to "AND" or "OR" between resources

    Attributes
    ----------
    clusterRoles : [str], default is Undefined, optional
        ClusterRoles is the list of cluster-wide role names for the user.
    resources : PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0MatchAllItems0Resources, default is Undefined, optional
        resources
    roles : [str], default is Undefined, optional
        Roles is the list of namespaced role names for the user.
    subjects : [PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0MatchAllItems0SubjectsItems0], default is Undefined, optional
        Subjects is the list of subject names like users, user groups, and service accounts.
    """


    clusterRoles?: [str]

    resources?: PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0MatchAllItems0Resources

    roles?: [str]

    subjects?: [PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0MatchAllItems0SubjectsItems0]


schema PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0MatchAllItems0Resources:
    r"""
    ResourceDescription contains information about the resource being created or modified.

    Attributes
    ----------
    annotations : {str:str}, default is Undefined, optional
        Annotations is a  map of annotations (key-value pairs of type string). Annotation keys
        and values support the wildcard characters "*" (matches zero or many characters) and
        "?" (matches at least one character).
    kinds : [str], default is Undefined, optional
        Kinds is a list of resource kinds.
    name : str, default is Undefined, optional
        Name is the name of the resource. The name supports wildcard characters
        "*" (matches zero or many characters) and "?" (at least one character).
        NOTE: "Name" is being deprecated in favor of "Names".
    names : [str], default is Undefined, optional
        Names are the names of the resources. Each name supports wildcard characters
        "*" (matches zero or many characters) and "?" (at least one character).
    namespaceSelector : PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0MatchAllItems0ResourcesNamespaceSelector, default is Undefined, optional
        namespace selector
    namespaces : [str], default is Undefined, optional
        Namespaces is a list of namespaces names. Each name supports wildcard characters
        "*" (matches zero or many characters) and "?" (at least one character).
    operations : [str], default is Undefined, optional
        Operations can contain values ["CREATE, "UPDATE", "CONNECT", "DELETE"], which are used to match a specific action.
    selector : PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0MatchAllItems0ResourcesSelector, default is Undefined, optional
        selector
    """


    annotations?: {str:str}

    kinds?: [str]

    name?: str

    names?: [str]

    namespaceSelector?: PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0MatchAllItems0ResourcesNamespaceSelector

    namespaces?: [str]

    operations?: [str]

    selector?: PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0MatchAllItems0ResourcesSelector


schema PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0MatchAllItems0ResourcesNamespaceSelector:
    r"""
    NamespaceSelector is a label selector for the resource namespace. Label keys and values
    in `matchLabels` support the wildcard characters `*` (matches zero or many characters)
    and `?` (matches one character).Wildcards allows writing label selectors like
    ["storage.k8s.io/*": "*"]. Note that using ["*" : "*"] matches any key and value but
    does not match an empty label set.

    Attributes
    ----------
    matchExpressions : [PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0MatchAllItems0ResourcesNamespaceSelectorMatchExpressionsItems0], default is Undefined, optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : {str:str}, default is Undefined, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
    """


    matchExpressions?: [PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0MatchAllItems0ResourcesNamespaceSelectorMatchExpressionsItems0]

    matchLabels?: {str:str}


schema PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0MatchAllItems0ResourcesNamespaceSelectorMatchExpressionsItems0:
    r"""
    A label selector requirement is a selector that contains values, a key, and an operator that
    relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the label key that the selector applies to.
    operator : str, default is Undefined, required
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], default is Undefined, optional
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
    """


    key: str

    operator: str

    values?: [str]


schema PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0MatchAllItems0ResourcesSelector:
    r"""
    Selector is a label selector. Label keys and values in `matchLabels` support the wildcard
    characters `*` (matches zero or many characters) and `?` (matches one character).
    Wildcards allows writing label selectors like ["storage.k8s.io/*": "*"]. Note that
    using ["*" : "*"] matches any key and value but does not match an empty label set.

    Attributes
    ----------
    matchExpressions : [PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0MatchAllItems0ResourcesSelectorMatchExpressionsItems0], default is Undefined, optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : {str:str}, default is Undefined, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
    """


    matchExpressions?: [PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0MatchAllItems0ResourcesSelectorMatchExpressionsItems0]

    matchLabels?: {str:str}


schema PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0MatchAllItems0ResourcesSelectorMatchExpressionsItems0:
    r"""
    A label selector requirement is a selector that contains values, a key, and an operator that
    relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the label key that the selector applies to.
    operator : str, default is Undefined, required
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], default is Undefined, optional
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
    """


    key: str

    operator: str

    values?: [str]


schema PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0MatchAllItems0SubjectsItems0:
    r"""
    Subject contains a reference to the object or user identities a role binding applies to.  This can either hold a direct API object reference,
    or a value for non-objects such as user and group names.

    Attributes
    ----------
    apiGroup : str, default is Undefined, optional
        APIGroup holds the API group of the referenced subject.
        Defaults to "" for ServiceAccount subjects.
        Defaults to "rbac.authorization.k8s.io" for User and Group subjects.
    kind : str, default is Undefined, required
        Kind of object being referenced. Values defined by this API group are "User", "Group", and "ServiceAccount".
        If the Authorizer does not recognized the kind value, the Authorizer should report an error.
    name : str, default is Undefined, required
        Name of the object being referenced.
    namespace : str, default is Undefined, optional
        Namespace of the referenced object.  If the object kind is non-namespace, such as "User" or "Group", and this value is not empty
        the Authorizer should report an error.
    """


    apiGroup?: str

    kind: str

    name: str

    namespace?: str


schema PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0MatchAnyItems0:
    r"""
    ResourceFilter allow users to "AND" or "OR" between resources

    Attributes
    ----------
    clusterRoles : [str], default is Undefined, optional
        ClusterRoles is the list of cluster-wide role names for the user.
    resources : PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0MatchAnyItems0Resources, default is Undefined, optional
        resources
    roles : [str], default is Undefined, optional
        Roles is the list of namespaced role names for the user.
    subjects : [PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0MatchAnyItems0SubjectsItems0], default is Undefined, optional
        Subjects is the list of subject names like users, user groups, and service accounts.
    """


    clusterRoles?: [str]

    resources?: PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0MatchAnyItems0Resources

    roles?: [str]

    subjects?: [PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0MatchAnyItems0SubjectsItems0]


schema PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0MatchAnyItems0Resources:
    r"""
    ResourceDescription contains information about the resource being created or modified.

    Attributes
    ----------
    annotations : {str:str}, default is Undefined, optional
        Annotations is a  map of annotations (key-value pairs of type string). Annotation keys
        and values support the wildcard characters "*" (matches zero or many characters) and
        "?" (matches at least one character).
    kinds : [str], default is Undefined, optional
        Kinds is a list of resource kinds.
    name : str, default is Undefined, optional
        Name is the name of the resource. The name supports wildcard characters
        "*" (matches zero or many characters) and "?" (at least one character).
        NOTE: "Name" is being deprecated in favor of "Names".
    names : [str], default is Undefined, optional
        Names are the names of the resources. Each name supports wildcard characters
        "*" (matches zero or many characters) and "?" (at least one character).
    namespaceSelector : PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0MatchAnyItems0ResourcesNamespaceSelector, default is Undefined, optional
        namespace selector
    namespaces : [str], default is Undefined, optional
        Namespaces is a list of namespaces names. Each name supports wildcard characters
        "*" (matches zero or many characters) and "?" (at least one character).
    operations : [str], default is Undefined, optional
        Operations can contain values ["CREATE, "UPDATE", "CONNECT", "DELETE"], which are used to match a specific action.
    selector : PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0MatchAnyItems0ResourcesSelector, default is Undefined, optional
        selector
    """


    annotations?: {str:str}

    kinds?: [str]

    name?: str

    names?: [str]

    namespaceSelector?: PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0MatchAnyItems0ResourcesNamespaceSelector

    namespaces?: [str]

    operations?: [str]

    selector?: PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0MatchAnyItems0ResourcesSelector


schema PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0MatchAnyItems0ResourcesNamespaceSelector:
    r"""
    NamespaceSelector is a label selector for the resource namespace. Label keys and values
    in `matchLabels` support the wildcard characters `*` (matches zero or many characters)
    and `?` (matches one character).Wildcards allows writing label selectors like
    ["storage.k8s.io/*": "*"]. Note that using ["*" : "*"] matches any key and value but
    does not match an empty label set.

    Attributes
    ----------
    matchExpressions : [PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0MatchAnyItems0ResourcesNamespaceSelectorMatchExpressionsItems0], default is Undefined, optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : {str:str}, default is Undefined, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
    """


    matchExpressions?: [PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0MatchAnyItems0ResourcesNamespaceSelectorMatchExpressionsItems0]

    matchLabels?: {str:str}


schema PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0MatchAnyItems0ResourcesNamespaceSelectorMatchExpressionsItems0:
    r"""
    A label selector requirement is a selector that contains values, a key, and an operator that
    relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the label key that the selector applies to.
    operator : str, default is Undefined, required
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], default is Undefined, optional
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
    """


    key: str

    operator: str

    values?: [str]


schema PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0MatchAnyItems0ResourcesSelector:
    r"""
    Selector is a label selector. Label keys and values in `matchLabels` support the wildcard
    characters `*` (matches zero or many characters) and `?` (matches one character).
    Wildcards allows writing label selectors like ["storage.k8s.io/*": "*"]. Note that
    using ["*" : "*"] matches any key and value but does not match an empty label set.

    Attributes
    ----------
    matchExpressions : [PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0MatchAnyItems0ResourcesSelectorMatchExpressionsItems0], default is Undefined, optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : {str:str}, default is Undefined, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
    """


    matchExpressions?: [PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0MatchAnyItems0ResourcesSelectorMatchExpressionsItems0]

    matchLabels?: {str:str}


schema PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0MatchAnyItems0ResourcesSelectorMatchExpressionsItems0:
    r"""
    A label selector requirement is a selector that contains values, a key, and an operator that
    relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the label key that the selector applies to.
    operator : str, default is Undefined, required
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], default is Undefined, optional
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
    """


    key: str

    operator: str

    values?: [str]


schema PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0MatchAnyItems0SubjectsItems0:
    r"""
    Subject contains a reference to the object or user identities a role binding applies to.  This can either hold a direct API object reference,
    or a value for non-objects such as user and group names.

    Attributes
    ----------
    apiGroup : str, default is Undefined, optional
        APIGroup holds the API group of the referenced subject.
        Defaults to "" for ServiceAccount subjects.
        Defaults to "rbac.authorization.k8s.io" for User and Group subjects.
    kind : str, default is Undefined, required
        Kind of object being referenced. Values defined by this API group are "User", "Group", and "ServiceAccount".
        If the Authorizer does not recognized the kind value, the Authorizer should report an error.
    name : str, default is Undefined, required
        Name of the object being referenced.
    namespace : str, default is Undefined, optional
        Namespace of the referenced object.  If the object kind is non-namespace, such as "User" or "Group", and this value is not empty
        the Authorizer should report an error.
    """


    apiGroup?: str

    kind: str

    name: str

    namespace?: str


schema PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0MatchResources:
    r"""
    ResourceDescription contains information about the resource being created or modified.
    Requires at least one tag to be specified when under MatchResources.
    Specifying ResourceDescription directly under match is being deprecated.
    Please specify under "any" or "all" instead.

    Attributes
    ----------
    annotations : {str:str}, default is Undefined, optional
        Annotations is a  map of annotations (key-value pairs of type string). Annotation keys
        and values support the wildcard characters "*" (matches zero or many characters) and
        "?" (matches at least one character).
    kinds : [str], default is Undefined, optional
        Kinds is a list of resource kinds.
    name : str, default is Undefined, optional
        Name is the name of the resource. The name supports wildcard characters
        "*" (matches zero or many characters) and "?" (at least one character).
        NOTE: "Name" is being deprecated in favor of "Names".
    names : [str], default is Undefined, optional
        Names are the names of the resources. Each name supports wildcard characters
        "*" (matches zero or many characters) and "?" (at least one character).
    namespaceSelector : PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0MatchResourcesNamespaceSelector, default is Undefined, optional
        namespace selector
    namespaces : [str], default is Undefined, optional
        Namespaces is a list of namespaces names. Each name supports wildcard characters
        "*" (matches zero or many characters) and "?" (at least one character).
    operations : [str], default is Undefined, optional
        Operations can contain values ["CREATE, "UPDATE", "CONNECT", "DELETE"], which are used to match a specific action.
    selector : PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0MatchResourcesSelector, default is Undefined, optional
        selector
    """


    annotations?: {str:str}

    kinds?: [str]

    name?: str

    names?: [str]

    namespaceSelector?: PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0MatchResourcesNamespaceSelector

    namespaces?: [str]

    operations?: [str]

    selector?: PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0MatchResourcesSelector


schema PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0MatchResourcesNamespaceSelector:
    r"""
    NamespaceSelector is a label selector for the resource namespace. Label keys and values
    in `matchLabels` support the wildcard characters `*` (matches zero or many characters)
    and `?` (matches one character).Wildcards allows writing label selectors like
    ["storage.k8s.io/*": "*"]. Note that using ["*" : "*"] matches any key and value but
    does not match an empty label set.

    Attributes
    ----------
    matchExpressions : [PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0MatchResourcesNamespaceSelectorMatchExpressionsItems0], default is Undefined, optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : {str:str}, default is Undefined, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
    """


    matchExpressions?: [PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0MatchResourcesNamespaceSelectorMatchExpressionsItems0]

    matchLabels?: {str:str}


schema PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0MatchResourcesNamespaceSelectorMatchExpressionsItems0:
    r"""
    A label selector requirement is a selector that contains values, a key, and an operator that
    relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the label key that the selector applies to.
    operator : str, default is Undefined, required
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], default is Undefined, optional
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
    """


    key: str

    operator: str

    values?: [str]


schema PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0MatchResourcesSelector:
    r"""
    Selector is a label selector. Label keys and values in `matchLabels` support the wildcard
    characters `*` (matches zero or many characters) and `?` (matches one character).
    Wildcards allows writing label selectors like ["storage.k8s.io/*": "*"]. Note that
    using ["*" : "*"] matches any key and value but does not match an empty label set.

    Attributes
    ----------
    matchExpressions : [PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0MatchResourcesSelectorMatchExpressionsItems0], default is Undefined, optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : {str:str}, default is Undefined, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
    """


    matchExpressions?: [PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0MatchResourcesSelectorMatchExpressionsItems0]

    matchLabels?: {str:str}


schema PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0MatchResourcesSelectorMatchExpressionsItems0:
    r"""
    A label selector requirement is a selector that contains values, a key, and an operator that
    relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the label key that the selector applies to.
    operator : str, default is Undefined, required
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], default is Undefined, optional
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
    """


    key: str

    operator: str

    values?: [str]


schema PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0MatchSubjectsItems0:
    r"""
    Subject contains a reference to the object or user identities a role binding applies to.  This can either hold a direct API object reference,
    or a value for non-objects such as user and group names.

    Attributes
    ----------
    apiGroup : str, default is Undefined, optional
        APIGroup holds the API group of the referenced subject.
        Defaults to "" for ServiceAccount subjects.
        Defaults to "rbac.authorization.k8s.io" for User and Group subjects.
    kind : str, default is Undefined, required
        Kind of object being referenced. Values defined by this API group are "User", "Group", and "ServiceAccount".
        If the Authorizer does not recognized the kind value, the Authorizer should report an error.
    name : str, default is Undefined, required
        Name of the object being referenced.
    namespace : str, default is Undefined, optional
        Namespace of the referenced object.  If the object kind is non-namespace, such as "User" or "Group", and this value is not empty
        the Authorizer should report an error.
    """


    apiGroup?: str

    kind: str

    name: str

    namespace?: str


schema PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0Mutate:
    r"""
    Mutation is used to modify matching resources.

    Attributes
    ----------
    foreach : [PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0MutateForeachItems0], default is Undefined, optional
        ForEach applies mutation rules to a list of sub-elements by creating a context for each entry in the list and looping over it to apply the specified logic.
    patchStrategicMerge : any, default is Undefined, optional
        PatchStrategicMerge is a strategic merge patch used to modify resources.
        See https://kubernetes.io/docs/tasks/manage-kubernetes-objects/update-api-object-kubectl-patch/
        and https://kubectl.docs.kubernetes.io/references/kustomize/patchesstrategicmerge/.
    patchesJson6902 : str, default is Undefined, optional
        PatchesJSON6902 is a list of RFC 6902 JSON Patch declarations used to modify resources.
        See https://tools.ietf.org/html/rfc6902 and https://kubectl.docs.kubernetes.io/references/kustomize/patchesjson6902/.
    targets : [PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0MutateTargetsItems0], default is Undefined, optional
        Targets defines the target resources to be mutated.
    """


    foreach?: [PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0MutateForeachItems0]

    patchStrategicMerge?: any

    patchesJson6902?: str

    targets?: [PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0MutateTargetsItems0]


schema PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0MutateForeachItems0:
    r"""
    ForEachMutation applies mutation rules to a list of sub-elements by creating a context for each entry in the list and looping over it to apply the specified logic.

    Attributes
    ----------
    context : [PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0MutateForeachItems0ContextItems0], default is Undefined, optional
        Context defines variables and data sources that can be used during rule execution.
    foreach : any, default is Undefined, optional
        Foreach declares a nested foreach iterator
    list : str, default is Undefined, optional
        List specifies a JMESPath expression that results in one or more elements
        to which the validation logic is applied.
    order : str, default is Undefined, optional
        Order defines the iteration order on the list.
        Can be Ascending to iterate from first to last element or Descending to iterate in from last to first element.
    patchStrategicMerge : any, default is Undefined, optional
        PatchStrategicMerge is a strategic merge patch used to modify resources.
        See https://kubernetes.io/docs/tasks/manage-kubernetes-objects/update-api-object-kubectl-patch/
        and https://kubectl.docs.kubernetes.io/references/kustomize/patchesstrategicmerge/.
    patchesJson6902 : str, default is Undefined, optional
        PatchesJSON6902 is a list of RFC 6902 JSON Patch declarations used to modify resources.
        See https://tools.ietf.org/html/rfc6902 and https://kubectl.docs.kubernetes.io/references/kustomize/patchesjson6902/.
    preconditions : PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0MutateForeachItems0Preconditions, default is Undefined, optional
        preconditions
    """


    context?: [PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0MutateForeachItems0ContextItems0]

    foreach?: any

    list?: str

    order?: "Ascending" | "Descending"

    patchStrategicMerge?: any

    patchesJson6902?: str

    preconditions?: PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0MutateForeachItems0Preconditions


schema PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0MutateForeachItems0ContextItems0:
    r"""
    ContextEntry adds variables and data sources to a rule Context. Either a
    ConfigMap reference or a APILookup must be provided.

    Attributes
    ----------
    apiCall : PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0MutateForeachItems0ContextItems0APICall, default is Undefined, optional
        api call
    configMap : PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0MutateForeachItems0ContextItems0ConfigMap, default is Undefined, optional
        config map
    imageRegistry : PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0MutateForeachItems0ContextItems0ImageRegistry, default is Undefined, optional
        image registry
    name : str, default is Undefined, optional
        Name is the variable name.
    variable : PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0MutateForeachItems0ContextItems0Variable, default is Undefined, optional
        variable
    """


    apiCall?: PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0MutateForeachItems0ContextItems0APICall

    configMap?: PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0MutateForeachItems0ContextItems0ConfigMap

    imageRegistry?: PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0MutateForeachItems0ContextItems0ImageRegistry

    name?: str

    variable?: PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0MutateForeachItems0ContextItems0Variable


schema PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0MutateForeachItems0ContextItems0APICall:
    r"""
    APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
    The data returned is stored in the context with the name for the context entry.

    Attributes
    ----------
    data : [PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0MutateForeachItems0ContextItems0APICallDataItems0], default is Undefined, optional
        Data specifies the POST data sent to the server.
    jmesPath : str, default is Undefined, optional
        JMESPath is an optional JSON Match Expression that can be used to
        transform the JSON response returned from the server. For example
        a JMESPath of "items | length(@)" applied to the API server response
        for the URLPath "/apis/apps/v1/deployments" will return the total count
        of deployments across all namespaces.
    method : str, default is "GET", optional
        Method is the HTTP request type (GET or POST).
    service : PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0MutateForeachItems0ContextItems0APICallService, default is Undefined, optional
        service
    urlPath : str, default is Undefined, optional
        URLPath is the URL path to be used in the HTTP GET or POST request to the
        Kubernetes API server (e.g. "/api/v1/namespaces" or  "/apis/apps/v1/deployments").
        The format required is the same format used by the `kubectl get --raw` command.
        See https://kyverno.io/docs/writing-policies/external-data-sources/#variables-from-kubernetes-api-server-calls
        for details.
    """


    data?: [PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0MutateForeachItems0ContextItems0APICallDataItems0]

    jmesPath?: str

    method?: "GET" | "POST" = "GET"

    service?: PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0MutateForeachItems0ContextItems0APICallService

    urlPath?: str


schema PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0MutateForeachItems0ContextItems0APICallDataItems0:
    r"""
    RequestData contains the HTTP POST data

    Attributes
    ----------
    key : str, default is Undefined, required
        Key is a unique identifier for the data value
    value : any, default is Undefined, required
        Value is the data value
    """


    key: str

    value: any


schema PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0MutateForeachItems0ContextItems0APICallService:
    r"""
    Service is an API call to a JSON web service

    Attributes
    ----------
    caBundle : str, default is Undefined, optional
        CABundle is a PEM encoded CA bundle which will be used to validate
        the server certificate.
    url : str, default is Undefined, required
        URL is the JSON web service URL. A typical form is
        `https://{service}.{namespace}:{port}/{path}`.
    """


    caBundle?: str

    url: str


schema PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0MutateForeachItems0ContextItems0ConfigMap:
    r"""
    ConfigMap is the ConfigMap reference.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name is the ConfigMap name.
    namespace : str, default is Undefined, optional
        Namespace is the ConfigMap namespace.
    """


    name: str

    namespace?: str


schema PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0MutateForeachItems0ContextItems0ImageRegistry:
    r"""
    ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
    details.

    Attributes
    ----------
    imageRegistryCredentials : PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0MutateForeachItems0ContextItems0ImageRegistryImageRegistryCredentials, default is Undefined, optional
        image registry credentials
    jmesPath : str, default is Undefined, optional
        JMESPath is an optional JSON Match Expression that can be used to
        transform the ImageData struct returned as a result of processing
        the image reference.
    reference : str, default is Undefined, required
        Reference is image reference to a container image in the registry.
        Example: ghcr.io/kyverno/kyverno:latest
    """


    imageRegistryCredentials?: PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0MutateForeachItems0ContextItems0ImageRegistryImageRegistryCredentials

    jmesPath?: str

    reference: str


schema PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0MutateForeachItems0ContextItems0ImageRegistryImageRegistryCredentials:
    r"""
    ImageRegistryCredentials provides credentials that will be used for authentication with registry

    Attributes
    ----------
    allowInsecureRegistry : bool, default is Undefined, optional
        AllowInsecureRegistry allows insecure access to a registry.
    providers : [str], default is Undefined, optional
        Providers specifies a list of OCI Registry names, whose authentication providers are provided.
        It can be of one of these values: default,google,azure,amazon,github.
    secrets : [str], default is Undefined, optional
        Secrets specifies a list of secrets that are provided for credentials.
        Secrets must live in the Kyverno namespace.
    """


    allowInsecureRegistry?: bool

    providers?: [str]

    secrets?: [str]


schema PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0MutateForeachItems0ContextItems0Variable:
    r"""
    Variable defines an arbitrary JMESPath context variable that can be defined inline.

    Attributes
    ----------
    default : any, default is Undefined, optional
        Default is an optional arbitrary JSON object that the variable may take if the JMESPath
        expression evaluates to nil
    jmesPath : str, default is Undefined, optional
        JMESPath is an optional JMESPath Expression that can be used to
        transform the variable.
    value : any, default is Undefined, optional
        Value is any arbitrary JSON object representable in YAML or JSON form.
    """


    default?: any

    jmesPath?: str

    value?: any


schema PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0MutateForeachItems0Preconditions:
    r"""
    AnyAllConditions are used to determine if a policy rule should be applied by evaluating a
    set of conditions. The declaration can contain nested `any` or `all` statements.
    See: https://kyverno.io/docs/writing-policies/preconditions/

    Attributes
    ----------
    $all : [PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0MutateForeachItems0PreconditionsAllItems0], default is Undefined, optional
        AllConditions enable variable-based conditional rule execution. This is useful for
        finer control of when an rule is applied. A condition can reference object data
        using JMESPath notation.
        Here, all of the conditions need to pass
    any : [PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0MutateForeachItems0PreconditionsAnyItems0], default is Undefined, optional
        AnyConditions enable variable-based conditional rule execution. This is useful for
        finer control of when an rule is applied. A condition can reference object data
        using JMESPath notation.
        Here, at least one of the conditions need to pass
    """


    $all?: [PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0MutateForeachItems0PreconditionsAllItems0]

    any?: [PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0MutateForeachItems0PreconditionsAnyItems0]


schema PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0MutateForeachItems0PreconditionsAllItems0:
    r"""
    Condition defines variable-based conditional criteria for rule execution.

    Attributes
    ----------
    key : any, default is Undefined, optional
        Key is the context entry (using JMESPath) for conditional rule evaluation.
    message : str, default is Undefined, optional
        Message is an optional display message
    operator : str, default is Undefined, optional
        Operator is the conditional operation to perform. Valid operators are:
        Equals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals,
        GreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan,
        DurationLessThanOrEquals, DurationLessThan
    value : any, default is Undefined, optional
        Value is the conditional value, or set of values. The values can be fixed set
        or can be variables declared using JMESPath.
    """


    key?: any

    message?: str

    operator?: "Equals" | "NotEquals" | "In" | "AnyIn" | "AllIn" | "NotIn" | "AnyNotIn" | "AllNotIn" | "GreaterThanOrEquals" | "GreaterThan" | "LessThanOrEquals" | "LessThan" | "DurationGreaterThanOrEquals" | "DurationGreaterThan" | "DurationLessThanOrEquals" | "DurationLessThan"

    value?: any


schema PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0MutateForeachItems0PreconditionsAnyItems0:
    r"""
    Condition defines variable-based conditional criteria for rule execution.

    Attributes
    ----------
    key : any, default is Undefined, optional
        Key is the context entry (using JMESPath) for conditional rule evaluation.
    message : str, default is Undefined, optional
        Message is an optional display message
    operator : str, default is Undefined, optional
        Operator is the conditional operation to perform. Valid operators are:
        Equals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals,
        GreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan,
        DurationLessThanOrEquals, DurationLessThan
    value : any, default is Undefined, optional
        Value is the conditional value, or set of values. The values can be fixed set
        or can be variables declared using JMESPath.
    """


    key?: any

    message?: str

    operator?: "Equals" | "NotEquals" | "In" | "AnyIn" | "AllIn" | "NotIn" | "AnyNotIn" | "AllNotIn" | "GreaterThanOrEquals" | "GreaterThan" | "LessThanOrEquals" | "LessThan" | "DurationGreaterThanOrEquals" | "DurationGreaterThan" | "DurationLessThanOrEquals" | "DurationLessThan"

    value?: any


schema PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0MutateTargetsItems0:
    r"""
    TargetResourceSpec defines targets for mutating existing resources.

    Attributes
    ----------
    apiVersion : str, default is Undefined, optional
        APIVersion specifies resource apiVersion.
    context : [PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0MutateTargetsItems0ContextItems0], default is Undefined, optional
        Context defines variables and data sources that can be used during rule execution.
    kind : str, default is Undefined, optional
        Kind specifies resource kind.
    name : str, default is Undefined, optional
        Name specifies the resource name.
    namespace : str, default is Undefined, optional
        Namespace specifies resource namespace.
    preconditions : any, default is Undefined, optional
        Preconditions are used to determine if a policy rule should be applied by evaluating a
        set of conditions. The declaration can contain nested `any` or `all` statements. A direct list
        of conditions (without `any` or `all` statements is supported for backwards compatibility but
        will be deprecated in the next major release.
        See: https://kyverno.io/docs/writing-policies/preconditions/
    uid : str, default is Undefined, optional
        UID specifies the resource uid.
    """


    apiVersion?: str

    context?: [PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0MutateTargetsItems0ContextItems0]

    kind?: str

    name?: str

    namespace?: str

    preconditions?: any

    uid?: str


schema PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0MutateTargetsItems0ContextItems0:
    r"""
    ContextEntry adds variables and data sources to a rule Context. Either a
    ConfigMap reference or a APILookup must be provided.

    Attributes
    ----------
    apiCall : PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0MutateTargetsItems0ContextItems0APICall, default is Undefined, optional
        api call
    configMap : PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0MutateTargetsItems0ContextItems0ConfigMap, default is Undefined, optional
        config map
    imageRegistry : PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0MutateTargetsItems0ContextItems0ImageRegistry, default is Undefined, optional
        image registry
    name : str, default is Undefined, optional
        Name is the variable name.
    variable : PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0MutateTargetsItems0ContextItems0Variable, default is Undefined, optional
        variable
    """


    apiCall?: PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0MutateTargetsItems0ContextItems0APICall

    configMap?: PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0MutateTargetsItems0ContextItems0ConfigMap

    imageRegistry?: PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0MutateTargetsItems0ContextItems0ImageRegistry

    name?: str

    variable?: PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0MutateTargetsItems0ContextItems0Variable


schema PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0MutateTargetsItems0ContextItems0APICall:
    r"""
    APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
    The data returned is stored in the context with the name for the context entry.

    Attributes
    ----------
    data : [PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0MutateTargetsItems0ContextItems0APICallDataItems0], default is Undefined, optional
        Data specifies the POST data sent to the server.
    jmesPath : str, default is Undefined, optional
        JMESPath is an optional JSON Match Expression that can be used to
        transform the JSON response returned from the server. For example
        a JMESPath of "items | length(@)" applied to the API server response
        for the URLPath "/apis/apps/v1/deployments" will return the total count
        of deployments across all namespaces.
    method : str, default is "GET", optional
        Method is the HTTP request type (GET or POST).
    service : PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0MutateTargetsItems0ContextItems0APICallService, default is Undefined, optional
        service
    urlPath : str, default is Undefined, optional
        URLPath is the URL path to be used in the HTTP GET or POST request to the
        Kubernetes API server (e.g. "/api/v1/namespaces" or  "/apis/apps/v1/deployments").
        The format required is the same format used by the `kubectl get --raw` command.
        See https://kyverno.io/docs/writing-policies/external-data-sources/#variables-from-kubernetes-api-server-calls
        for details.
    """


    data?: [PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0MutateTargetsItems0ContextItems0APICallDataItems0]

    jmesPath?: str

    method?: "GET" | "POST" = "GET"

    service?: PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0MutateTargetsItems0ContextItems0APICallService

    urlPath?: str


schema PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0MutateTargetsItems0ContextItems0APICallDataItems0:
    r"""
    RequestData contains the HTTP POST data

    Attributes
    ----------
    key : str, default is Undefined, required
        Key is a unique identifier for the data value
    value : any, default is Undefined, required
        Value is the data value
    """


    key: str

    value: any


schema PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0MutateTargetsItems0ContextItems0APICallService:
    r"""
    Service is an API call to a JSON web service

    Attributes
    ----------
    caBundle : str, default is Undefined, optional
        CABundle is a PEM encoded CA bundle which will be used to validate
        the server certificate.
    url : str, default is Undefined, required
        URL is the JSON web service URL. A typical form is
        `https://{service}.{namespace}:{port}/{path}`.
    """


    caBundle?: str

    url: str


schema PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0MutateTargetsItems0ContextItems0ConfigMap:
    r"""
    ConfigMap is the ConfigMap reference.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name is the ConfigMap name.
    namespace : str, default is Undefined, optional
        Namespace is the ConfigMap namespace.
    """


    name: str

    namespace?: str


schema PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0MutateTargetsItems0ContextItems0ImageRegistry:
    r"""
    ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
    details.

    Attributes
    ----------
    imageRegistryCredentials : PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0MutateTargetsItems0ContextItems0ImageRegistryImageRegistryCredentials, default is Undefined, optional
        image registry credentials
    jmesPath : str, default is Undefined, optional
        JMESPath is an optional JSON Match Expression that can be used to
        transform the ImageData struct returned as a result of processing
        the image reference.
    reference : str, default is Undefined, required
        Reference is image reference to a container image in the registry.
        Example: ghcr.io/kyverno/kyverno:latest
    """


    imageRegistryCredentials?: PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0MutateTargetsItems0ContextItems0ImageRegistryImageRegistryCredentials

    jmesPath?: str

    reference: str


schema PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0MutateTargetsItems0ContextItems0ImageRegistryImageRegistryCredentials:
    r"""
    ImageRegistryCredentials provides credentials that will be used for authentication with registry

    Attributes
    ----------
    allowInsecureRegistry : bool, default is Undefined, optional
        AllowInsecureRegistry allows insecure access to a registry.
    providers : [str], default is Undefined, optional
        Providers specifies a list of OCI Registry names, whose authentication providers are provided.
        It can be of one of these values: default,google,azure,amazon,github.
    secrets : [str], default is Undefined, optional
        Secrets specifies a list of secrets that are provided for credentials.
        Secrets must live in the Kyverno namespace.
    """


    allowInsecureRegistry?: bool

    providers?: [str]

    secrets?: [str]


schema PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0MutateTargetsItems0ContextItems0Variable:
    r"""
    Variable defines an arbitrary JMESPath context variable that can be defined inline.

    Attributes
    ----------
    default : any, default is Undefined, optional
        Default is an optional arbitrary JSON object that the variable may take if the JMESPath
        expression evaluates to nil
    jmesPath : str, default is Undefined, optional
        JMESPath is an optional JMESPath Expression that can be used to
        transform the variable.
    value : any, default is Undefined, optional
        Value is any arbitrary JSON object representable in YAML or JSON form.
    """


    default?: any

    jmesPath?: str

    value?: any


schema PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0Validate:
    r"""
    Validation is used to validate matching resources.

    Attributes
    ----------
    anyPattern : any, default is Undefined, optional
        AnyPattern specifies list of validation patterns. At least one of the patterns
        must be satisfied for the validation rule to succeed.
    cel : PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ValidateCel, default is Undefined, optional
        cel
    deny : PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ValidateDeny, default is Undefined, optional
        deny
    foreach : [PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ValidateForeachItems0], default is Undefined, optional
        ForEach applies validate rules to a list of sub-elements by creating a context for each entry in the list and looping over it to apply the specified logic.
    manifests : PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ValidateManifests, default is Undefined, optional
        manifests
    message : str, default is Undefined, optional
        Message specifies a custom message to be displayed on failure.
    pattern : any, default is Undefined, optional
        Pattern specifies an overlay-style pattern used to check resources.
    podSecurity : PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ValidatePodSecurity, default is Undefined, optional
        pod security
    """


    anyPattern?: any

    cel?: PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ValidateCel

    deny?: PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ValidateDeny

    foreach?: [PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ValidateForeachItems0]

    manifests?: PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ValidateManifests

    message?: str

    pattern?: any

    podSecurity?: PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ValidatePodSecurity


schema PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ValidateCel:
    r"""
    CEL allows validation checks using the Common Expression Language (https://kubernetes.io/docs/reference/using-api/cel/).

    Attributes
    ----------
    auditAnnotations : [PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ValidateCelAuditAnnotationsItems0], default is Undefined, optional
        AuditAnnotations contains CEL expressions which are used to produce audit annotations for the audit event of the API request.
    expressions : [PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ValidateCelExpressionsItems0], default is Undefined, optional
        Expressions is a list of CELExpression types.
    paramKind : PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ValidateCelParamKind, default is Undefined, optional
        param kind
    paramRef : PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ValidateCelParamRef, default is Undefined, optional
        param ref
    variables : [PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ValidateCelVariablesItems0], default is Undefined, optional
        Variables contain definitions of variables that can be used in composition of other expressions.
        Each variable is defined as a named CEL expression.
        The variables defined here will be available under `variables` in other expressions of the policy.
    """


    auditAnnotations?: [PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ValidateCelAuditAnnotationsItems0]

    expressions?: [PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ValidateCelExpressionsItems0]

    paramKind?: PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ValidateCelParamKind

    paramRef?: PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ValidateCelParamRef

    variables?: [PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ValidateCelVariablesItems0]


schema PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ValidateCelAuditAnnotationsItems0:
    r"""
    AuditAnnotation describes how to produce an audit annotation for an API request.

    Attributes
    ----------
    key : str, default is Undefined, required
        key specifies the audit annotation key. The audit annotation keys of
        a ValidatingAdmissionPolicy must be unique. The key must be a qualified
        name ([A-Za-z0-9][-A-Za-z0-9_.]*) no more than 63 bytes in length.

        The key is combined with the resource name of the
        ValidatingAdmissionPolicy to construct an audit annotation key:
        "{ValidatingAdmissionPolicy name}/{key}".

        If an admission webhook uses the same resource name as this ValidatingAdmissionPolicy
        and the same audit annotation key, the annotation key will be identical.
        In this case, the first annotation written with the key will be included
        in the audit event and all subsequent annotations with the same key
        will be discarded.

        Required.
    valueExpression : str, default is Undefined, required
        valueExpression represents the expression which is evaluated by CEL to
        produce an audit annotation value. The expression must evaluate to either
        a string or null value. If the expression evaluates to a string, the
        audit annotation is included with the string value. If the expression
        evaluates to null or empty string the audit annotation will be omitted.
        The valueExpression may be no longer than 5kb in length.
        If the result of the valueExpression is more than 10kb in length, it
        will be truncated to 10kb.

        If multiple ValidatingAdmissionPolicyBinding resources match an
        API request, then the valueExpression will be evaluated for
        each binding. All unique values produced by the valueExpressions
        will be joined together in a comma-separated list.

        Required.
    """


    key: str

    valueExpression: str


schema PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ValidateCelExpressionsItems0:
    r"""
    Validation specifies the CEL expression which is used to apply the validation.

    Attributes
    ----------
    expression : str, default is Undefined, required
        Expression represents the expression which will be evaluated by CEL.
        ref: https://github.com/google/cel-spec
        CEL expressions have access to the contents of the API request/response, organized into CEL variables as well as some other useful variables:

        - 'object' - The object from the incoming request. The value is null for DELETE requests.
        - 'oldObject' - The existing object. The value is null for CREATE requests.
        - 'request' - Attributes of the API request([ref](/pkg/apis/admission/types.go#AdmissionRequest)).
        - 'params' - Parameter resource referred to by the policy binding being evaluated. Only populated if the policy has a ParamKind.
        - 'namespaceObject' - The namespace object that the incoming object belongs to. The value is null for cluster-scoped resources.
        - 'variables' - Map of composited variables, from its name to its lazily evaluated value.
          For example, a variable named 'foo' can be accessed as 'variables.foo'.
        - 'authorizer' - A CEL Authorizer. May be used to perform authorization checks for the principal (user or service account) of the request.
          See https://pkg.go.dev/k8s.io/apiserver/pkg/cel/library#Authz
        - 'authorizer.requestResource' - A CEL ResourceCheck constructed from the 'authorizer' and configured with the
          request resource.

        The `apiVersion`, `kind`, `metadata.name` and `metadata.generateName` are always accessible from the root of the
        object. No other metadata properties are accessible.

        Only property names of the form `[a-zA-Z_.-/][a-zA-Z0-9_.-/]*` are accessible.
        Accessible property names are escaped according to the following rules when accessed in the expression:
        - '__' escapes to '__underscores__'
        - '.' escapes to '__dot__'
        - '-' escapes to '__dash__'
        - '/' escapes to '__slash__'
        - Property names that exactly match a CEL RESERVED keyword escape to '__{keyword}__'. The keywords are:
        	  "true", "false", "null", "in", "as", "break", "const", "continue", "else", "for", "function", "if",
        	  "import", "let", "loop", "package", "namespace", "return".
        Examples:
          - Expression accessing a property named "namespace": {"Expression": "object.__namespace__ > 0"}
          - Expression accessing a property named "x-prop": {"Expression": "object.x__dash__prop > 0"}
          - Expression accessing a property named "redact__d": {"Expression": "object.redact__underscores__d > 0"}

        Equality on arrays with list type of 'set' or 'map' ignores element order, i.e. [1, 2] == [2, 1].
        Concatenation on arrays with x-kubernetes-list-type use the semantics of the list type:
          - 'set': `X + Y` performs a union where the array positions of all elements in `X` are preserved and
            non-intersecting elements in `Y` are appended, retaining their partial order.
          - 'map': `X + Y` performs a merge where the array positions of all keys in `X` are preserved but the values
            are overwritten by values in `Y` when the key sets of `X` and `Y` intersect. Elements in `Y` with
            non-intersecting keys are appended, retaining their partial order.
        Required.
    message : str, default is Undefined, optional
        Message represents the message displayed when validation fails. The message is required if the Expression contains
        line breaks. The message must not contain line breaks.
        If unset, the message is "failed rule: {Rule}".
        e.g. "must be a URL with the host matching spec.host"
        If the Expression contains line breaks. Message is required.
        The message must not contain line breaks.
        If unset, the message is "failed Expression: {Expression}".
    messageExpression : str, default is Undefined, optional
        messageExpression declares a CEL expression that evaluates to the validation failure message that is returned when this rule fails.
        Since messageExpression is used as a failure message, it must evaluate to a string.
        If both message and messageExpression are present on a validation, then messageExpression will be used if validation fails.
        If messageExpression results in a runtime error, the runtime error is logged, and the validation failure message is produced
        as if the messageExpression field were unset. If messageExpression evaluates to an empty string, a string with only spaces, or a string
        that contains line breaks, then the validation failure message will also be produced as if the messageExpression field were unset, and
        the fact that messageExpression produced an empty string/string with only spaces/string with line breaks will be logged.
        messageExpression has access to all the same variables as the `expression` except for 'authorizer' and 'authorizer.requestResource'.
        Example:
        "object.x must be less than max ("+string(params.max)+")"
    reason : str, default is Undefined, optional
        Reason represents a machine-readable description of why this validation failed.
        If this is the first validation in the list to fail, this reason, as well as the
        corresponding HTTP response code, are used in the
        HTTP response to the client.
        The currently supported reasons are: "Unauthorized", "Forbidden", "Invalid", "RequestEntityTooLarge".
        If not set, StatusReasonInvalid is used in the response to the client.
    """


    expression: str

    message?: str

    messageExpression?: str

    reason?: str


schema PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ValidateCelParamKind:
    r"""
    ParamKind is a tuple of Group Kind and Version.

    Attributes
    ----------
    apiVersion : str, default is Undefined, optional
        APIVersion is the API group version the resources belong to.
        In format of "group/version".
        Required.
    kind : str, default is Undefined, optional
        Kind is the API kind the resources belong to.
        Required.
    """


    apiVersion?: str

    kind?: str


schema PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ValidateCelParamRef:
    r"""
    ParamRef references a parameter resource.

    Attributes
    ----------
    name : str, default is Undefined, optional
        `name` is the name of the resource being referenced.

        `name` and `selector` are mutually exclusive properties. If one is set,
        the other must be unset.
    namespace : str, default is Undefined, optional
        namespace is the namespace of the referenced resource. Allows limiting
        the search for params to a specific namespace. Applies to both `name` and
        `selector` fields.

        A per-namespace parameter may be used by specifying a namespace-scoped
        `paramKind` in the policy and leaving this field empty.

        - If `paramKind` is cluster-scoped, this field MUST be unset. Setting this
        field results in a configuration error.

        - If `paramKind` is namespace-scoped, the namespace of the object being
        evaluated for admission will be used when this field is left unset. Take
        care that if this is left empty the binding must not match any cluster-scoped
        resources, which will result in an error.
    parameterNotFoundAction : str, default is Undefined, optional
        `parameterNotFoundAction` controls the behavior of the binding when the resource
        exists, and name or selector is valid, but there are no parameters
        matched by the binding. If the value is set to `Allow`, then no
        matched parameters will be treated as successful validation by the binding.
        If set to `Deny`, then no matched parameters will be subject to the
        `failurePolicy` of the policy.

        Allowed values are `Allow` or `Deny`
        Default to `Deny`
    selector : PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ValidateCelParamRefSelector, default is Undefined, optional
        selector
    """


    name?: str

    namespace?: str

    parameterNotFoundAction?: str

    selector?: PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ValidateCelParamRefSelector


schema PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ValidateCelParamRefSelector:
    r"""
    selector can be used to match multiple param objects based on their labels.
    Supply selector: {} to match all resources of the ParamKind.

    If multiple params are found, they are all evaluated with the policy expressions
    and the results are ANDed together.

    One of `name` or `selector` must be set, but `name` and `selector` are
    mutually exclusive properties. If one is set, the other must be unset.

    Attributes
    ----------
    matchExpressions : [PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ValidateCelParamRefSelectorMatchExpressionsItems0], default is Undefined, optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : {str:str}, default is Undefined, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
    """


    matchExpressions?: [PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ValidateCelParamRefSelectorMatchExpressionsItems0]

    matchLabels?: {str:str}


schema PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ValidateCelParamRefSelectorMatchExpressionsItems0:
    r"""
    A label selector requirement is a selector that contains values, a key, and an operator that
    relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the label key that the selector applies to.
    operator : str, default is Undefined, required
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], default is Undefined, optional
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
    """


    key: str

    operator: str

    values?: [str]


schema PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ValidateCelVariablesItems0:
    r"""
    Variable is the definition of a variable that is used for composition.

    Attributes
    ----------
    expression : str, default is Undefined, required
        Expression is the expression that will be evaluated as the value of the variable.
        The CEL expression has access to the same identifiers as the CEL expressions in Validation.
    name : str, default is Undefined, required
        Name is the name of the variable. The name must be a valid CEL identifier and unique among all variables.
        The variable can be accessed in other expressions through `variables`
        For example, if name is "foo", the variable will be available as `variables.foo`
    """


    expression: str

    name: str


schema PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ValidateDeny:
    r"""
    Deny defines conditions used to pass or fail a validation rule.

    Attributes
    ----------
    conditions : any, default is Undefined, optional
        Multiple conditions can be declared under an `any` or `all` statement. A direct list
        of conditions (without `any` or `all` statements) is also supported for backwards compatibility
        but will be deprecated in the next major release.
        See: https://kyverno.io/docs/writing-policies/validate/#deny-rules
    """


    conditions?: any


schema PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ValidateForeachItems0:
    r"""
    ForEachValidation applies validate rules to a list of sub-elements by creating a context for each entry in the list and looping over it to apply the specified logic.

    Attributes
    ----------
    anyPattern : any, default is Undefined, optional
        AnyPattern specifies list of validation patterns. At least one of the patterns
        must be satisfied for the validation rule to succeed.
    context : [PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ValidateForeachItems0ContextItems0], default is Undefined, optional
        Context defines variables and data sources that can be used during rule execution.
    deny : PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ValidateForeachItems0Deny, default is Undefined, optional
        deny
    elementScope : bool, default is Undefined, optional
        ElementScope specifies whether to use the current list element as the scope for validation. Defaults to "true" if not specified.
        When set to "false", "request.object" is used as the validation scope within the foreach
        block to allow referencing other elements in the subtree.
    foreach : any, default is Undefined, optional
        Foreach declares a nested foreach iterator
    list : str, default is Undefined, optional
        List specifies a JMESPath expression that results in one or more elements
        to which the validation logic is applied.
    pattern : any, default is Undefined, optional
        Pattern specifies an overlay-style pattern used to check resources.
    preconditions : PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ValidateForeachItems0Preconditions, default is Undefined, optional
        preconditions
    """


    anyPattern?: any

    context?: [PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ValidateForeachItems0ContextItems0]

    deny?: PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ValidateForeachItems0Deny

    elementScope?: bool

    foreach?: any

    list?: str

    pattern?: any

    preconditions?: PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ValidateForeachItems0Preconditions


schema PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ValidateForeachItems0ContextItems0:
    r"""
    ContextEntry adds variables and data sources to a rule Context. Either a
    ConfigMap reference or a APILookup must be provided.

    Attributes
    ----------
    apiCall : PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ValidateForeachItems0ContextItems0APICall, default is Undefined, optional
        api call
    configMap : PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ValidateForeachItems0ContextItems0ConfigMap, default is Undefined, optional
        config map
    imageRegistry : PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ValidateForeachItems0ContextItems0ImageRegistry, default is Undefined, optional
        image registry
    name : str, default is Undefined, optional
        Name is the variable name.
    variable : PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ValidateForeachItems0ContextItems0Variable, default is Undefined, optional
        variable
    """


    apiCall?: PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ValidateForeachItems0ContextItems0APICall

    configMap?: PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ValidateForeachItems0ContextItems0ConfigMap

    imageRegistry?: PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ValidateForeachItems0ContextItems0ImageRegistry

    name?: str

    variable?: PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ValidateForeachItems0ContextItems0Variable


schema PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ValidateForeachItems0ContextItems0APICall:
    r"""
    APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
    The data returned is stored in the context with the name for the context entry.

    Attributes
    ----------
    data : [PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ValidateForeachItems0ContextItems0APICallDataItems0], default is Undefined, optional
        Data specifies the POST data sent to the server.
    jmesPath : str, default is Undefined, optional
        JMESPath is an optional JSON Match Expression that can be used to
        transform the JSON response returned from the server. For example
        a JMESPath of "items | length(@)" applied to the API server response
        for the URLPath "/apis/apps/v1/deployments" will return the total count
        of deployments across all namespaces.
    method : str, default is "GET", optional
        Method is the HTTP request type (GET or POST).
    service : PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ValidateForeachItems0ContextItems0APICallService, default is Undefined, optional
        service
    urlPath : str, default is Undefined, optional
        URLPath is the URL path to be used in the HTTP GET or POST request to the
        Kubernetes API server (e.g. "/api/v1/namespaces" or  "/apis/apps/v1/deployments").
        The format required is the same format used by the `kubectl get --raw` command.
        See https://kyverno.io/docs/writing-policies/external-data-sources/#variables-from-kubernetes-api-server-calls
        for details.
    """


    data?: [PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ValidateForeachItems0ContextItems0APICallDataItems0]

    jmesPath?: str

    method?: "GET" | "POST" = "GET"

    service?: PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ValidateForeachItems0ContextItems0APICallService

    urlPath?: str


schema PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ValidateForeachItems0ContextItems0APICallDataItems0:
    r"""
    RequestData contains the HTTP POST data

    Attributes
    ----------
    key : str, default is Undefined, required
        Key is a unique identifier for the data value
    value : any, default is Undefined, required
        Value is the data value
    """


    key: str

    value: any


schema PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ValidateForeachItems0ContextItems0APICallService:
    r"""
    Service is an API call to a JSON web service

    Attributes
    ----------
    caBundle : str, default is Undefined, optional
        CABundle is a PEM encoded CA bundle which will be used to validate
        the server certificate.
    url : str, default is Undefined, required
        URL is the JSON web service URL. A typical form is
        `https://{service}.{namespace}:{port}/{path}`.
    """


    caBundle?: str

    url: str


schema PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ValidateForeachItems0ContextItems0ConfigMap:
    r"""
    ConfigMap is the ConfigMap reference.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name is the ConfigMap name.
    namespace : str, default is Undefined, optional
        Namespace is the ConfigMap namespace.
    """


    name: str

    namespace?: str


schema PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ValidateForeachItems0ContextItems0ImageRegistry:
    r"""
    ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
    details.

    Attributes
    ----------
    imageRegistryCredentials : PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ValidateForeachItems0ContextItems0ImageRegistryImageRegistryCredentials, default is Undefined, optional
        image registry credentials
    jmesPath : str, default is Undefined, optional
        JMESPath is an optional JSON Match Expression that can be used to
        transform the ImageData struct returned as a result of processing
        the image reference.
    reference : str, default is Undefined, required
        Reference is image reference to a container image in the registry.
        Example: ghcr.io/kyverno/kyverno:latest
    """


    imageRegistryCredentials?: PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ValidateForeachItems0ContextItems0ImageRegistryImageRegistryCredentials

    jmesPath?: str

    reference: str


schema PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ValidateForeachItems0ContextItems0ImageRegistryImageRegistryCredentials:
    r"""
    ImageRegistryCredentials provides credentials that will be used for authentication with registry

    Attributes
    ----------
    allowInsecureRegistry : bool, default is Undefined, optional
        AllowInsecureRegistry allows insecure access to a registry.
    providers : [str], default is Undefined, optional
        Providers specifies a list of OCI Registry names, whose authentication providers are provided.
        It can be of one of these values: default,google,azure,amazon,github.
    secrets : [str], default is Undefined, optional
        Secrets specifies a list of secrets that are provided for credentials.
        Secrets must live in the Kyverno namespace.
    """


    allowInsecureRegistry?: bool

    providers?: [str]

    secrets?: [str]


schema PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ValidateForeachItems0ContextItems0Variable:
    r"""
    Variable defines an arbitrary JMESPath context variable that can be defined inline.

    Attributes
    ----------
    default : any, default is Undefined, optional
        Default is an optional arbitrary JSON object that the variable may take if the JMESPath
        expression evaluates to nil
    jmesPath : str, default is Undefined, optional
        JMESPath is an optional JMESPath Expression that can be used to
        transform the variable.
    value : any, default is Undefined, optional
        Value is any arbitrary JSON object representable in YAML or JSON form.
    """


    default?: any

    jmesPath?: str

    value?: any


schema PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ValidateForeachItems0Deny:
    r"""
    Deny defines conditions used to pass or fail a validation rule.

    Attributes
    ----------
    conditions : any, default is Undefined, optional
        Multiple conditions can be declared under an `any` or `all` statement. A direct list
        of conditions (without `any` or `all` statements) is also supported for backwards compatibility
        but will be deprecated in the next major release.
        See: https://kyverno.io/docs/writing-policies/validate/#deny-rules
    """


    conditions?: any


schema PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ValidateForeachItems0Preconditions:
    r"""
    AnyAllConditions are used to determine if a policy rule should be applied by evaluating a
    set of conditions. The declaration can contain nested `any` or `all` statements.
    See: https://kyverno.io/docs/writing-policies/preconditions/

    Attributes
    ----------
    $all : [PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ValidateForeachItems0PreconditionsAllItems0], default is Undefined, optional
        AllConditions enable variable-based conditional rule execution. This is useful for
        finer control of when an rule is applied. A condition can reference object data
        using JMESPath notation.
        Here, all of the conditions need to pass
    any : [PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ValidateForeachItems0PreconditionsAnyItems0], default is Undefined, optional
        AnyConditions enable variable-based conditional rule execution. This is useful for
        finer control of when an rule is applied. A condition can reference object data
        using JMESPath notation.
        Here, at least one of the conditions need to pass
    """


    $all?: [PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ValidateForeachItems0PreconditionsAllItems0]

    any?: [PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ValidateForeachItems0PreconditionsAnyItems0]


schema PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ValidateForeachItems0PreconditionsAllItems0:
    r"""
    Condition defines variable-based conditional criteria for rule execution.

    Attributes
    ----------
    key : any, default is Undefined, optional
        Key is the context entry (using JMESPath) for conditional rule evaluation.
    message : str, default is Undefined, optional
        Message is an optional display message
    operator : str, default is Undefined, optional
        Operator is the conditional operation to perform. Valid operators are:
        Equals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals,
        GreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan,
        DurationLessThanOrEquals, DurationLessThan
    value : any, default is Undefined, optional
        Value is the conditional value, or set of values. The values can be fixed set
        or can be variables declared using JMESPath.
    """


    key?: any

    message?: str

    operator?: "Equals" | "NotEquals" | "In" | "AnyIn" | "AllIn" | "NotIn" | "AnyNotIn" | "AllNotIn" | "GreaterThanOrEquals" | "GreaterThan" | "LessThanOrEquals" | "LessThan" | "DurationGreaterThanOrEquals" | "DurationGreaterThan" | "DurationLessThanOrEquals" | "DurationLessThan"

    value?: any


schema PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ValidateForeachItems0PreconditionsAnyItems0:
    r"""
    Condition defines variable-based conditional criteria for rule execution.

    Attributes
    ----------
    key : any, default is Undefined, optional
        Key is the context entry (using JMESPath) for conditional rule evaluation.
    message : str, default is Undefined, optional
        Message is an optional display message
    operator : str, default is Undefined, optional
        Operator is the conditional operation to perform. Valid operators are:
        Equals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals,
        GreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan,
        DurationLessThanOrEquals, DurationLessThan
    value : any, default is Undefined, optional
        Value is the conditional value, or set of values. The values can be fixed set
        or can be variables declared using JMESPath.
    """


    key?: any

    message?: str

    operator?: "Equals" | "NotEquals" | "In" | "AnyIn" | "AllIn" | "NotIn" | "AnyNotIn" | "AllNotIn" | "GreaterThanOrEquals" | "GreaterThan" | "LessThanOrEquals" | "LessThan" | "DurationGreaterThanOrEquals" | "DurationGreaterThan" | "DurationLessThanOrEquals" | "DurationLessThan"

    value?: any


schema PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ValidateManifests:
    r"""
    Manifest specifies conditions for manifest verification

    Attributes
    ----------
    annotationDomain : str, default is Undefined, optional
        AnnotationDomain is custom domain of annotation for message and signature. Default is "cosign.sigstore.dev".
    attestors : [PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ValidateManifestsAttestorsItems0], default is Undefined, optional
        Attestors specified the required attestors (i.e. authorities)
    dryRun : PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ValidateManifestsDryRun, default is Undefined, optional
        dry run
    ignoreFields : [PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ValidateManifestsIgnoreFieldsItems0], default is Undefined, optional
        Fields which will be ignored while comparing manifests.
    repository : str, default is Undefined, optional
        Repository is an optional alternate OCI repository to use for resource bundle reference.
        The repository can be overridden per Attestor or Attestation.
    """


    annotationDomain?: str

    attestors?: [PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ValidateManifestsAttestorsItems0]

    dryRun?: PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ValidateManifestsDryRun

    ignoreFields?: [PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ValidateManifestsIgnoreFieldsItems0]

    repository?: str


schema PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ValidateManifestsAttestorsItems0:
    r"""
    policy spaces upbound io v1alpha1 shared upbound policy spec rules items0 validate manifests attestors items0

    Attributes
    ----------
    count : int, default is Undefined, optional
        Count specifies the required number of entries that must match. If the count is null, all entries must match
        (a logical AND). If the count is 1, at least one entry must match (a logical OR). If the count contains a
        value N, then N must be less than or equal to the size of entries, and at least N entries must match.
    entries : [PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ValidateManifestsAttestorsItems0EntriesItems0], default is Undefined, optional
        Entries contains the available attestors. An attestor can be a static key,
        attributes for keyless verification, or a nested attestor declaration.
    """


    count?: int

    entries?: [PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ValidateManifestsAttestorsItems0EntriesItems0]


    check:
        count >= 1 if count not in [None, Undefined]


schema PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ValidateManifestsAttestorsItems0EntriesItems0:
    r"""
    policy spaces upbound io v1alpha1 shared upbound policy spec rules items0 validate manifests attestors items0 entries items0

    Attributes
    ----------
    annotations : {str:str}, default is Undefined, optional
        Annotations are used for image verification.
        Every specified key-value pair must exist and match in the verified payload.
        The payload may contain other key-value pairs.
    attestor : any, default is Undefined, optional
        Attestor is a nested set of Attestor used to specify a more complex set of match authorities.
    certificates : PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ValidateManifestsAttestorsItems0EntriesItems0Certificates, default is Undefined, optional
        certificates
    keyless : PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ValidateManifestsAttestorsItems0EntriesItems0Keyless, default is Undefined, optional
        keyless
    keys : PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ValidateManifestsAttestorsItems0EntriesItems0Keys, default is Undefined, optional
        keys
    repository : str, default is Undefined, optional
        Repository is an optional alternate OCI repository to use for signatures and attestations that match this rule.
        If specified Repository will override other OCI image repository locations for this Attestor.
    """


    annotations?: {str:str}

    attestor?: any

    certificates?: PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ValidateManifestsAttestorsItems0EntriesItems0Certificates

    keyless?: PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ValidateManifestsAttestorsItems0EntriesItems0Keyless

    keys?: PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ValidateManifestsAttestorsItems0EntriesItems0Keys

    repository?: str


schema PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ValidateManifestsAttestorsItems0EntriesItems0Certificates:
    r"""
    Certificates specifies one or more certificates.

    Attributes
    ----------
    cert : str, default is Undefined, optional
        Cert is an optional PEM-encoded public certificate.
    certChain : str, default is Undefined, optional
        CertChain is an optional PEM encoded set of certificates used to verify.
    ctlog : PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ValidateManifestsAttestorsItems0EntriesItems0CertificatesCtlog, default is Undefined, optional
        ctlog
    rekor : PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ValidateManifestsAttestorsItems0EntriesItems0CertificatesRekor, default is Undefined, optional
        rekor
    """


    cert?: str

    certChain?: str

    ctlog?: PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ValidateManifestsAttestorsItems0EntriesItems0CertificatesCtlog

    rekor?: PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ValidateManifestsAttestorsItems0EntriesItems0CertificatesRekor


schema PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ValidateManifestsAttestorsItems0EntriesItems0CertificatesCtlog:
    r"""
    CTLog (certificate timestamp log) provides a configuration for validation of Signed Certificate
    Timestamps (SCTs). If the value is unset, the default behavior by Cosign is used.

    Attributes
    ----------
    ignoreSCT : bool, default is Undefined, optional
        IgnoreSCT defines whether to use the Signed Certificate Timestamp (SCT) log to check for a certificate
        timestamp. Default is false. Set to true if this was opted out during signing.
    pubkey : str, default is Undefined, optional
        PubKey, if set, is used to validate SCTs against a custom source.
    """


    ignoreSCT?: bool

    pubkey?: str


schema PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ValidateManifestsAttestorsItems0EntriesItems0CertificatesRekor:
    r"""
    Rekor provides configuration for the Rekor transparency log service. If an empty object
    is provided the public instance of Rekor (https://rekor.sigstore.dev) is used.

    Attributes
    ----------
    ignoreTlog : bool, default is Undefined, optional
        IgnoreTlog skips transparency log verification.
    pubkey : str, default is Undefined, optional
        RekorPubKey is an optional PEM-encoded public key to use for a custom Rekor.
        If set, this will be used to validate transparency log signatures from a custom Rekor.
    url : str, default is Undefined, required
        URL is the address of the transparency log. Defaults to the public Rekor log instance https://rekor.sigstore.dev.
    """


    ignoreTlog?: bool

    pubkey?: str

    url: str


schema PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ValidateManifestsAttestorsItems0EntriesItems0Keyless:
    r"""
    Keyless is a set of attribute used to verify a Sigstore keyless attestor.
    See https://github.com/sigstore/cosign/blob/main/KEYLESS.md.

    Attributes
    ----------
    additionalExtensions : {str:str}, default is Undefined, optional
        AdditionalExtensions are certificate-extensions used for keyless signing.
    ctlog : PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ValidateManifestsAttestorsItems0EntriesItems0KeylessCtlog, default is Undefined, optional
        ctlog
    issuer : str, default is Undefined, optional
        Issuer is the certificate issuer used for keyless signing.
    rekor : PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ValidateManifestsAttestorsItems0EntriesItems0KeylessRekor, default is Undefined, optional
        rekor
    roots : str, default is Undefined, optional
        Roots is an optional set of PEM encoded trusted root certificates.
        If not provided, the system roots are used.
    subject : str, default is Undefined, optional
        Subject is the verified identity used for keyless signing, for example the email address.
    """


    additionalExtensions?: {str:str}

    ctlog?: PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ValidateManifestsAttestorsItems0EntriesItems0KeylessCtlog

    issuer?: str

    rekor?: PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ValidateManifestsAttestorsItems0EntriesItems0KeylessRekor

    roots?: str

    subject?: str


schema PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ValidateManifestsAttestorsItems0EntriesItems0KeylessCtlog:
    r"""
    CTLog (certificate timestamp log) provides a configuration for validation of Signed Certificate
    Timestamps (SCTs). If the value is unset, the default behavior by Cosign is used.

    Attributes
    ----------
    ignoreSCT : bool, default is Undefined, optional
        IgnoreSCT defines whether to use the Signed Certificate Timestamp (SCT) log to check for a certificate
        timestamp. Default is false. Set to true if this was opted out during signing.
    pubkey : str, default is Undefined, optional
        PubKey, if set, is used to validate SCTs against a custom source.
    """


    ignoreSCT?: bool

    pubkey?: str


schema PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ValidateManifestsAttestorsItems0EntriesItems0KeylessRekor:
    r"""
    Rekor provides configuration for the Rekor transparency log service. If an empty object
    is provided the public instance of Rekor (https://rekor.sigstore.dev) is used.

    Attributes
    ----------
    ignoreTlog : bool, default is Undefined, optional
        IgnoreTlog skips transparency log verification.
    pubkey : str, default is Undefined, optional
        RekorPubKey is an optional PEM-encoded public key to use for a custom Rekor.
        If set, this will be used to validate transparency log signatures from a custom Rekor.
    url : str, default is Undefined, required
        URL is the address of the transparency log. Defaults to the public Rekor log instance https://rekor.sigstore.dev.
    """


    ignoreTlog?: bool

    pubkey?: str

    url: str


schema PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ValidateManifestsAttestorsItems0EntriesItems0Keys:
    r"""
    Keys specifies one or more public keys.

    Attributes
    ----------
    ctlog : PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ValidateManifestsAttestorsItems0EntriesItems0KeysCtlog, default is Undefined, optional
        ctlog
    kms : str, default is Undefined, optional
        KMS provides the URI to the public key stored in a Key Management System. See:
        https://github.com/sigstore/cosign/blob/main/KMS.md
    publicKeys : str, default is Undefined, optional
        Keys is a set of X.509 public keys used to verify image signatures. The keys can be directly
        specified or can be a variable reference to a key specified in a ConfigMap (see
        https://kyverno.io/docs/writing-policies/variables/), or reference a standard Kubernetes Secret
        elsewhere in the cluster by specifying it in the format "k8s://<namespace>/<secret_name>".
        The named Secret must specify a key `cosign.pub` containing the public key used for
        verification, (see https://github.com/sigstore/cosign/blob/main/KMS.md#kubernetes-secret).
        When multiple keys are specified each key is processed as a separate staticKey entry
        (.attestors[*].entries.keys) within the set of attestors and the count is applied across the keys.
    rekor : PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ValidateManifestsAttestorsItems0EntriesItems0KeysRekor, default is Undefined, optional
        rekor
    secret : PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ValidateManifestsAttestorsItems0EntriesItems0KeysSecret, default is Undefined, optional
        secret
    signatureAlgorithm : str, default is "sha256", optional
        Specify signature algorithm for public keys. Supported values are sha224, sha256, sha384 and sha512.
    """


    ctlog?: PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ValidateManifestsAttestorsItems0EntriesItems0KeysCtlog

    kms?: str

    publicKeys?: str

    rekor?: PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ValidateManifestsAttestorsItems0EntriesItems0KeysRekor

    secret?: PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ValidateManifestsAttestorsItems0EntriesItems0KeysSecret

    signatureAlgorithm?: str = "sha256"


schema PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ValidateManifestsAttestorsItems0EntriesItems0KeysCtlog:
    r"""
    CTLog (certificate timestamp log) provides a configuration for validation of Signed Certificate
    Timestamps (SCTs). If the value is unset, the default behavior by Cosign is used.

    Attributes
    ----------
    ignoreSCT : bool, default is Undefined, optional
        IgnoreSCT defines whether to use the Signed Certificate Timestamp (SCT) log to check for a certificate
        timestamp. Default is false. Set to true if this was opted out during signing.
    pubkey : str, default is Undefined, optional
        PubKey, if set, is used to validate SCTs against a custom source.
    """


    ignoreSCT?: bool

    pubkey?: str


schema PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ValidateManifestsAttestorsItems0EntriesItems0KeysRekor:
    r"""
    Rekor provides configuration for the Rekor transparency log service. If an empty object
    is provided the public instance of Rekor (https://rekor.sigstore.dev) is used.

    Attributes
    ----------
    ignoreTlog : bool, default is Undefined, optional
        IgnoreTlog skips transparency log verification.
    pubkey : str, default is Undefined, optional
        RekorPubKey is an optional PEM-encoded public key to use for a custom Rekor.
        If set, this will be used to validate transparency log signatures from a custom Rekor.
    url : str, default is Undefined, required
        URL is the address of the transparency log. Defaults to the public Rekor log instance https://rekor.sigstore.dev.
    """


    ignoreTlog?: bool

    pubkey?: str

    url: str


schema PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ValidateManifestsAttestorsItems0EntriesItems0KeysSecret:
    r"""
    Reference to a Secret resource that contains a public key

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the secret. The provided secret must contain a key named cosign.pub.
    namespace : str, default is Undefined, required
        Namespace name where the Secret exists.
    """


    name: str

    namespace: str


schema PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ValidateManifestsDryRun:
    r"""
    DryRun configuration

    Attributes
    ----------
    enable : bool, default is Undefined, optional
        enable
    namespace : str, default is Undefined, optional
        namespace
    """


    enable?: bool

    namespace?: str


schema PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ValidateManifestsIgnoreFieldsItems0:
    r"""
    policy spaces upbound io v1alpha1 shared upbound policy spec rules items0 validate manifests ignore fields items0

    Attributes
    ----------
    fields : [str], default is Undefined, optional
        fields
    objects : [PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ValidateManifestsIgnoreFieldsItems0ObjectsItems0], default is Undefined, optional
        objects
    """


    fields?: [str]

    objects?: [PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ValidateManifestsIgnoreFieldsItems0ObjectsItems0]


schema PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ValidateManifestsIgnoreFieldsItems0ObjectsItems0:
    r"""
    policy spaces upbound io v1alpha1 shared upbound policy spec rules items0 validate manifests ignore fields items0 objects items0

    Attributes
    ----------
    group : str, default is Undefined, optional
        group
    kind : str, default is Undefined, optional
        kind
    name : str, default is Undefined, optional
        name
    namespace : str, default is Undefined, optional
        namespace
    version : str, default is Undefined, optional
        version
    """


    group?: str

    kind?: str

    name?: str

    namespace?: str

    version?: str


schema PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ValidatePodSecurity:
    r"""
    PodSecurity applies exemptions for Kubernetes Pod Security admission
    by specifying exclusions for Pod Security Standards controls.

    Attributes
    ----------
    exclude : [PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ValidatePodSecurityExcludeItems0], default is Undefined, optional
        Exclude specifies the Pod Security Standard controls to be excluded.
    level : str, default is Undefined, optional
        Level defines the Pod Security Standard level to be applied to workloads.
        Allowed values are privileged, baseline, and restricted.
    version : str, default is Undefined, optional
        Version defines the Pod Security Standard versions that Kubernetes supports.
        Allowed values are v1.19, v1.20, v1.21, v1.22, v1.23, v1.24, v1.25, v1.26, latest. Defaults to latest.
    """


    exclude?: [PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ValidatePodSecurityExcludeItems0]

    level?: "privileged" | "baseline" | "restricted"

    version?: "v1.19" | "v1.20" | "v1.21" | "v1.22" | "v1.23" | "v1.24" | "v1.25" | "v1.26" | "latest"


schema PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0ValidatePodSecurityExcludeItems0:
    r"""
    PodSecurityStandard specifies the Pod Security Standard controls to be excluded.

    Attributes
    ----------
    controlName : str, default is Undefined, required
        ControlName specifies the name of the Pod Security Standard control.
        See: https://kubernetes.io/docs/concepts/security/pod-security-standards/
    images : [str], default is Undefined, optional
        Images selects matching containers and applies the container level PSS.
        Each image is the image name consisting of the registry address, repository, image, and tag.
        Empty list matches no containers, PSS checks are applied at the pod level only.
        Wildcards ('*' and '?') are allowed. See: https://kubernetes.io/docs/concepts/containers/images.
    """


    controlName: "HostProcess" | "Host Namespaces" | "Privileged Containers" | "Capabilities" | "HostPath Volumes" | "Host Ports" | "AppArmor" | "SELinux" | "/proc Mount Type" | "Seccomp" | "Sysctls" | "Volume Types" | "Privilege Escalation" | "Running as Non-root" | "Running as Non-root user"

    images?: [str]


schema PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0VerifyImagesItems0:
    r"""
    ImageVerification validates that images that match the specified pattern
    are signed with the supplied public key. Once the image is verified it is
    mutated to include the SHA digest retrieved during the registration.

    Attributes
    ----------
    additionalExtensions : {str:str}, default is Undefined, optional
        Deprecated.
    annotations : {str:str}, default is Undefined, optional
        Deprecated. Use annotations per Attestor instead.
    attestations : [PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0VerifyImagesItems0AttestationsItems0], default is Undefined, optional
        Attestations are optional checks for signed in-toto Statements used to verify the image.
        See https://github.com/in-toto/attestation. Kyverno fetches signed attestations from the
        OCI registry and decodes them into a list of Statement declarations.
    attestors : [PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0VerifyImagesItems0AttestorsItems0], default is Undefined, optional
        Attestors specified the required attestors (i.e. authorities)
    image : str, default is Undefined, optional
        Deprecated. Use ImageReferences instead.
    imageReferences : [str], default is Undefined, optional
        ImageReferences is a list of matching image reference patterns. At least one pattern in the
        list must match the image for the rule to apply. Each image reference consists of a registry
        address (defaults to docker.io), repository, image, and tag (defaults to latest).
        Wildcards ('*' and '?') are allowed. See: https://kubernetes.io/docs/concepts/containers/images.
    imageRegistryCredentials : PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0VerifyImagesItems0ImageRegistryCredentials, default is Undefined, optional
        image registry credentials
    issuer : str, default is Undefined, optional
        Deprecated. Use KeylessAttestor instead.
    key : str, default is Undefined, optional
        Deprecated. Use StaticKeyAttestor instead.
    mutateDigest : bool, default is True, optional
        MutateDigest enables replacement of image tags with digests.
        Defaults to true.
    repository : str, default is Undefined, optional
        Repository is an optional alternate OCI repository to use for image signatures and attestations that match this rule.
        If specified Repository will override the default OCI image repository configured for the installation.
        The repository can also be overridden per Attestor or Attestation.
    required : bool, default is True, optional
        Required validates that images are verified i.e. have matched passed a signature or attestation check.
    roots : str, default is Undefined, optional
        Deprecated. Use KeylessAttestor instead.
    subject : str, default is Undefined, optional
        Deprecated. Use KeylessAttestor instead.
    $type : str, default is Undefined, optional
        Type specifies the method of signature validation. The allowed options
        are Cosign and Notary. By default Cosign is used if a type is not specified.
    useCache : bool, default is True, optional
        UseCache enables caching of image verify responses for this rule.
    verifyDigest : bool, default is True, optional
        VerifyDigest validates that images have a digest.
    """


    additionalExtensions?: {str:str}

    annotations?: {str:str}

    attestations?: [PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0VerifyImagesItems0AttestationsItems0]

    attestors?: [PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0VerifyImagesItems0AttestorsItems0]

    image?: str

    imageReferences?: [str]

    imageRegistryCredentials?: PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0VerifyImagesItems0ImageRegistryCredentials

    issuer?: str

    key?: str

    mutateDigest?: bool = True

    repository?: str

    required?: bool = True

    roots?: str

    subject?: str

    $type?: "Cosign" | "Notary"

    useCache?: bool = True

    verifyDigest?: bool = True


schema PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0VerifyImagesItems0AttestationsItems0:
    r"""
    Attestation are checks for signed in-toto Statements that are used to verify the image.
    See https://github.com/in-toto/attestation. Kyverno fetches signed attestations from the
    OCI registry and decodes them into a list of Statements.

    Attributes
    ----------
    attestors : [PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0VerifyImagesItems0AttestationsItems0AttestorsItems0], default is Undefined, optional
        Attestors specify the required attestors (i.e. authorities).
    conditions : [PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0VerifyImagesItems0AttestationsItems0ConditionsItems0], default is Undefined, optional
        Conditions are used to verify attributes within a Predicate. If no Conditions are specified
        the attestation check is satisfied as long there are predicates that match the predicate type.
    predicateType : str, default is Undefined, optional
        Deprecated in favour of 'Type', to be removed soon
    $type : str, default is Undefined, optional
        Type defines the type of attestation contained within the Statement.
    """


    attestors?: [PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0VerifyImagesItems0AttestationsItems0AttestorsItems0]

    conditions?: [PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0VerifyImagesItems0AttestationsItems0ConditionsItems0]

    predicateType?: str

    $type?: str


schema PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0VerifyImagesItems0AttestationsItems0AttestorsItems0:
    r"""
    policy spaces upbound io v1alpha1 shared upbound policy spec rules items0 verify images items0 attestations items0 attestors items0

    Attributes
    ----------
    count : int, default is Undefined, optional
        Count specifies the required number of entries that must match. If the count is null, all entries must match
        (a logical AND). If the count is 1, at least one entry must match (a logical OR). If the count contains a
        value N, then N must be less than or equal to the size of entries, and at least N entries must match.
    entries : [PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0VerifyImagesItems0AttestationsItems0AttestorsItems0EntriesItems0], default is Undefined, optional
        Entries contains the available attestors. An attestor can be a static key,
        attributes for keyless verification, or a nested attestor declaration.
    """


    count?: int

    entries?: [PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0VerifyImagesItems0AttestationsItems0AttestorsItems0EntriesItems0]


    check:
        count >= 1 if count not in [None, Undefined]


schema PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0VerifyImagesItems0AttestationsItems0AttestorsItems0EntriesItems0:
    r"""
    policy spaces upbound io v1alpha1 shared upbound policy spec rules items0 verify images items0 attestations items0 attestors items0 entries items0

    Attributes
    ----------
    annotations : {str:str}, default is Undefined, optional
        Annotations are used for image verification.
        Every specified key-value pair must exist and match in the verified payload.
        The payload may contain other key-value pairs.
    attestor : any, default is Undefined, optional
        Attestor is a nested set of Attestor used to specify a more complex set of match authorities.
    certificates : PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0VerifyImagesItems0AttestationsItems0AttestorsItems0EntriesItems0Certificates, default is Undefined, optional
        certificates
    keyless : PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0VerifyImagesItems0AttestationsItems0AttestorsItems0EntriesItems0Keyless, default is Undefined, optional
        keyless
    keys : PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0VerifyImagesItems0AttestationsItems0AttestorsItems0EntriesItems0Keys, default is Undefined, optional
        keys
    repository : str, default is Undefined, optional
        Repository is an optional alternate OCI repository to use for signatures and attestations that match this rule.
        If specified Repository will override other OCI image repository locations for this Attestor.
    """


    annotations?: {str:str}

    attestor?: any

    certificates?: PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0VerifyImagesItems0AttestationsItems0AttestorsItems0EntriesItems0Certificates

    keyless?: PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0VerifyImagesItems0AttestationsItems0AttestorsItems0EntriesItems0Keyless

    keys?: PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0VerifyImagesItems0AttestationsItems0AttestorsItems0EntriesItems0Keys

    repository?: str


schema PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0VerifyImagesItems0AttestationsItems0AttestorsItems0EntriesItems0Certificates:
    r"""
    Certificates specifies one or more certificates.

    Attributes
    ----------
    cert : str, default is Undefined, optional
        Cert is an optional PEM-encoded public certificate.
    certChain : str, default is Undefined, optional
        CertChain is an optional PEM encoded set of certificates used to verify.
    ctlog : PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0VerifyImagesItems0AttestationsItems0AttestorsItems0EntriesItems0CertificatesCtlog, default is Undefined, optional
        ctlog
    rekor : PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0VerifyImagesItems0AttestationsItems0AttestorsItems0EntriesItems0CertificatesRekor, default is Undefined, optional
        rekor
    """


    cert?: str

    certChain?: str

    ctlog?: PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0VerifyImagesItems0AttestationsItems0AttestorsItems0EntriesItems0CertificatesCtlog

    rekor?: PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0VerifyImagesItems0AttestationsItems0AttestorsItems0EntriesItems0CertificatesRekor


schema PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0VerifyImagesItems0AttestationsItems0AttestorsItems0EntriesItems0CertificatesCtlog:
    r"""
    CTLog (certificate timestamp log) provides a configuration for validation of Signed Certificate
    Timestamps (SCTs). If the value is unset, the default behavior by Cosign is used.

    Attributes
    ----------
    ignoreSCT : bool, default is Undefined, optional
        IgnoreSCT defines whether to use the Signed Certificate Timestamp (SCT) log to check for a certificate
        timestamp. Default is false. Set to true if this was opted out during signing.
    pubkey : str, default is Undefined, optional
        PubKey, if set, is used to validate SCTs against a custom source.
    """


    ignoreSCT?: bool

    pubkey?: str


schema PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0VerifyImagesItems0AttestationsItems0AttestorsItems0EntriesItems0CertificatesRekor:
    r"""
    Rekor provides configuration for the Rekor transparency log service. If an empty object
    is provided the public instance of Rekor (https://rekor.sigstore.dev) is used.

    Attributes
    ----------
    ignoreTlog : bool, default is Undefined, optional
        IgnoreTlog skips transparency log verification.
    pubkey : str, default is Undefined, optional
        RekorPubKey is an optional PEM-encoded public key to use for a custom Rekor.
        If set, this will be used to validate transparency log signatures from a custom Rekor.
    url : str, default is Undefined, required
        URL is the address of the transparency log. Defaults to the public Rekor log instance https://rekor.sigstore.dev.
    """


    ignoreTlog?: bool

    pubkey?: str

    url: str


schema PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0VerifyImagesItems0AttestationsItems0AttestorsItems0EntriesItems0Keyless:
    r"""
    Keyless is a set of attribute used to verify a Sigstore keyless attestor.
    See https://github.com/sigstore/cosign/blob/main/KEYLESS.md.

    Attributes
    ----------
    additionalExtensions : {str:str}, default is Undefined, optional
        AdditionalExtensions are certificate-extensions used for keyless signing.
    ctlog : PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0VerifyImagesItems0AttestationsItems0AttestorsItems0EntriesItems0KeylessCtlog, default is Undefined, optional
        ctlog
    issuer : str, default is Undefined, optional
        Issuer is the certificate issuer used for keyless signing.
    rekor : PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0VerifyImagesItems0AttestationsItems0AttestorsItems0EntriesItems0KeylessRekor, default is Undefined, optional
        rekor
    roots : str, default is Undefined, optional
        Roots is an optional set of PEM encoded trusted root certificates.
        If not provided, the system roots are used.
    subject : str, default is Undefined, optional
        Subject is the verified identity used for keyless signing, for example the email address.
    """


    additionalExtensions?: {str:str}

    ctlog?: PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0VerifyImagesItems0AttestationsItems0AttestorsItems0EntriesItems0KeylessCtlog

    issuer?: str

    rekor?: PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0VerifyImagesItems0AttestationsItems0AttestorsItems0EntriesItems0KeylessRekor

    roots?: str

    subject?: str


schema PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0VerifyImagesItems0AttestationsItems0AttestorsItems0EntriesItems0KeylessCtlog:
    r"""
    CTLog (certificate timestamp log) provides a configuration for validation of Signed Certificate
    Timestamps (SCTs). If the value is unset, the default behavior by Cosign is used.

    Attributes
    ----------
    ignoreSCT : bool, default is Undefined, optional
        IgnoreSCT defines whether to use the Signed Certificate Timestamp (SCT) log to check for a certificate
        timestamp. Default is false. Set to true if this was opted out during signing.
    pubkey : str, default is Undefined, optional
        PubKey, if set, is used to validate SCTs against a custom source.
    """


    ignoreSCT?: bool

    pubkey?: str


schema PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0VerifyImagesItems0AttestationsItems0AttestorsItems0EntriesItems0KeylessRekor:
    r"""
    Rekor provides configuration for the Rekor transparency log service. If an empty object
    is provided the public instance of Rekor (https://rekor.sigstore.dev) is used.

    Attributes
    ----------
    ignoreTlog : bool, default is Undefined, optional
        IgnoreTlog skips transparency log verification.
    pubkey : str, default is Undefined, optional
        RekorPubKey is an optional PEM-encoded public key to use for a custom Rekor.
        If set, this will be used to validate transparency log signatures from a custom Rekor.
    url : str, default is Undefined, required
        URL is the address of the transparency log. Defaults to the public Rekor log instance https://rekor.sigstore.dev.
    """


    ignoreTlog?: bool

    pubkey?: str

    url: str


schema PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0VerifyImagesItems0AttestationsItems0AttestorsItems0EntriesItems0Keys:
    r"""
    Keys specifies one or more public keys.

    Attributes
    ----------
    ctlog : PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0VerifyImagesItems0AttestationsItems0AttestorsItems0EntriesItems0KeysCtlog, default is Undefined, optional
        ctlog
    kms : str, default is Undefined, optional
        KMS provides the URI to the public key stored in a Key Management System. See:
        https://github.com/sigstore/cosign/blob/main/KMS.md
    publicKeys : str, default is Undefined, optional
        Keys is a set of X.509 public keys used to verify image signatures. The keys can be directly
        specified or can be a variable reference to a key specified in a ConfigMap (see
        https://kyverno.io/docs/writing-policies/variables/), or reference a standard Kubernetes Secret
        elsewhere in the cluster by specifying it in the format "k8s://<namespace>/<secret_name>".
        The named Secret must specify a key `cosign.pub` containing the public key used for
        verification, (see https://github.com/sigstore/cosign/blob/main/KMS.md#kubernetes-secret).
        When multiple keys are specified each key is processed as a separate staticKey entry
        (.attestors[*].entries.keys) within the set of attestors and the count is applied across the keys.
    rekor : PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0VerifyImagesItems0AttestationsItems0AttestorsItems0EntriesItems0KeysRekor, default is Undefined, optional
        rekor
    secret : PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0VerifyImagesItems0AttestationsItems0AttestorsItems0EntriesItems0KeysSecret, default is Undefined, optional
        secret
    signatureAlgorithm : str, default is "sha256", optional
        Specify signature algorithm for public keys. Supported values are sha224, sha256, sha384 and sha512.
    """


    ctlog?: PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0VerifyImagesItems0AttestationsItems0AttestorsItems0EntriesItems0KeysCtlog

    kms?: str

    publicKeys?: str

    rekor?: PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0VerifyImagesItems0AttestationsItems0AttestorsItems0EntriesItems0KeysRekor

    secret?: PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0VerifyImagesItems0AttestationsItems0AttestorsItems0EntriesItems0KeysSecret

    signatureAlgorithm?: str = "sha256"


schema PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0VerifyImagesItems0AttestationsItems0AttestorsItems0EntriesItems0KeysCtlog:
    r"""
    CTLog (certificate timestamp log) provides a configuration for validation of Signed Certificate
    Timestamps (SCTs). If the value is unset, the default behavior by Cosign is used.

    Attributes
    ----------
    ignoreSCT : bool, default is Undefined, optional
        IgnoreSCT defines whether to use the Signed Certificate Timestamp (SCT) log to check for a certificate
        timestamp. Default is false. Set to true if this was opted out during signing.
    pubkey : str, default is Undefined, optional
        PubKey, if set, is used to validate SCTs against a custom source.
    """


    ignoreSCT?: bool

    pubkey?: str


schema PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0VerifyImagesItems0AttestationsItems0AttestorsItems0EntriesItems0KeysRekor:
    r"""
    Rekor provides configuration for the Rekor transparency log service. If an empty object
    is provided the public instance of Rekor (https://rekor.sigstore.dev) is used.

    Attributes
    ----------
    ignoreTlog : bool, default is Undefined, optional
        IgnoreTlog skips transparency log verification.
    pubkey : str, default is Undefined, optional
        RekorPubKey is an optional PEM-encoded public key to use for a custom Rekor.
        If set, this will be used to validate transparency log signatures from a custom Rekor.
    url : str, default is Undefined, required
        URL is the address of the transparency log. Defaults to the public Rekor log instance https://rekor.sigstore.dev.
    """


    ignoreTlog?: bool

    pubkey?: str

    url: str


schema PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0VerifyImagesItems0AttestationsItems0AttestorsItems0EntriesItems0KeysSecret:
    r"""
    Reference to a Secret resource that contains a public key

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the secret. The provided secret must contain a key named cosign.pub.
    namespace : str, default is Undefined, required
        Namespace name where the Secret exists.
    """


    name: str

    namespace: str


schema PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0VerifyImagesItems0AttestationsItems0ConditionsItems0:
    r"""
    AnyAllConditions consists of conditions wrapped denoting a logical criteria to be fulfilled.
    AnyConditions get fulfilled when at least one of its sub-conditions passes.
    AllConditions get fulfilled only when all of its sub-conditions pass.

    Attributes
    ----------
    $all : [PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0VerifyImagesItems0AttestationsItems0ConditionsItems0AllItems0], default is Undefined, optional
        AllConditions enable variable-based conditional rule execution. This is useful for
        finer control of when an rule is applied. A condition can reference object data
        using JMESPath notation.
        Here, all of the conditions need to pass
    any : [PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0VerifyImagesItems0AttestationsItems0ConditionsItems0AnyItems0], default is Undefined, optional
        AnyConditions enable variable-based conditional rule execution. This is useful for
        finer control of when an rule is applied. A condition can reference object data
        using JMESPath notation.
        Here, at least one of the conditions need to pass
    """


    $all?: [PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0VerifyImagesItems0AttestationsItems0ConditionsItems0AllItems0]

    any?: [PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0VerifyImagesItems0AttestationsItems0ConditionsItems0AnyItems0]


schema PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0VerifyImagesItems0AttestationsItems0ConditionsItems0AllItems0:
    r"""
    Condition defines variable-based conditional criteria for rule execution.

    Attributes
    ----------
    key : any, default is Undefined, optional
        Key is the context entry (using JMESPath) for conditional rule evaluation.
    message : str, default is Undefined, optional
        Message is an optional display message
    operator : str, default is Undefined, optional
        Operator is the conditional operation to perform. Valid operators are:
        Equals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals,
        GreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan,
        DurationLessThanOrEquals, DurationLessThan
    value : any, default is Undefined, optional
        Value is the conditional value, or set of values. The values can be fixed set
        or can be variables declared using JMESPath.
    """


    key?: any

    message?: str

    operator?: "Equals" | "NotEquals" | "In" | "AnyIn" | "AllIn" | "NotIn" | "AnyNotIn" | "AllNotIn" | "GreaterThanOrEquals" | "GreaterThan" | "LessThanOrEquals" | "LessThan" | "DurationGreaterThanOrEquals" | "DurationGreaterThan" | "DurationLessThanOrEquals" | "DurationLessThan"

    value?: any


schema PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0VerifyImagesItems0AttestationsItems0ConditionsItems0AnyItems0:
    r"""
    Condition defines variable-based conditional criteria for rule execution.

    Attributes
    ----------
    key : any, default is Undefined, optional
        Key is the context entry (using JMESPath) for conditional rule evaluation.
    message : str, default is Undefined, optional
        Message is an optional display message
    operator : str, default is Undefined, optional
        Operator is the conditional operation to perform. Valid operators are:
        Equals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals,
        GreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan,
        DurationLessThanOrEquals, DurationLessThan
    value : any, default is Undefined, optional
        Value is the conditional value, or set of values. The values can be fixed set
        or can be variables declared using JMESPath.
    """


    key?: any

    message?: str

    operator?: "Equals" | "NotEquals" | "In" | "AnyIn" | "AllIn" | "NotIn" | "AnyNotIn" | "AllNotIn" | "GreaterThanOrEquals" | "GreaterThan" | "LessThanOrEquals" | "LessThan" | "DurationGreaterThanOrEquals" | "DurationGreaterThan" | "DurationLessThanOrEquals" | "DurationLessThan"

    value?: any


schema PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0VerifyImagesItems0AttestorsItems0:
    r"""
    policy spaces upbound io v1alpha1 shared upbound policy spec rules items0 verify images items0 attestors items0

    Attributes
    ----------
    count : int, default is Undefined, optional
        Count specifies the required number of entries that must match. If the count is null, all entries must match
        (a logical AND). If the count is 1, at least one entry must match (a logical OR). If the count contains a
        value N, then N must be less than or equal to the size of entries, and at least N entries must match.
    entries : [PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0VerifyImagesItems0AttestorsItems0EntriesItems0], default is Undefined, optional
        Entries contains the available attestors. An attestor can be a static key,
        attributes for keyless verification, or a nested attestor declaration.
    """


    count?: int

    entries?: [PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0VerifyImagesItems0AttestorsItems0EntriesItems0]


    check:
        count >= 1 if count not in [None, Undefined]


schema PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0VerifyImagesItems0AttestorsItems0EntriesItems0:
    r"""
    policy spaces upbound io v1alpha1 shared upbound policy spec rules items0 verify images items0 attestors items0 entries items0

    Attributes
    ----------
    annotations : {str:str}, default is Undefined, optional
        Annotations are used for image verification.
        Every specified key-value pair must exist and match in the verified payload.
        The payload may contain other key-value pairs.
    attestor : any, default is Undefined, optional
        Attestor is a nested set of Attestor used to specify a more complex set of match authorities.
    certificates : PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0VerifyImagesItems0AttestorsItems0EntriesItems0Certificates, default is Undefined, optional
        certificates
    keyless : PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0VerifyImagesItems0AttestorsItems0EntriesItems0Keyless, default is Undefined, optional
        keyless
    keys : PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0VerifyImagesItems0AttestorsItems0EntriesItems0Keys, default is Undefined, optional
        keys
    repository : str, default is Undefined, optional
        Repository is an optional alternate OCI repository to use for signatures and attestations that match this rule.
        If specified Repository will override other OCI image repository locations for this Attestor.
    """


    annotations?: {str:str}

    attestor?: any

    certificates?: PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0VerifyImagesItems0AttestorsItems0EntriesItems0Certificates

    keyless?: PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0VerifyImagesItems0AttestorsItems0EntriesItems0Keyless

    keys?: PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0VerifyImagesItems0AttestorsItems0EntriesItems0Keys

    repository?: str


schema PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0VerifyImagesItems0AttestorsItems0EntriesItems0Certificates:
    r"""
    Certificates specifies one or more certificates.

    Attributes
    ----------
    cert : str, default is Undefined, optional
        Cert is an optional PEM-encoded public certificate.
    certChain : str, default is Undefined, optional
        CertChain is an optional PEM encoded set of certificates used to verify.
    ctlog : PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0VerifyImagesItems0AttestorsItems0EntriesItems0CertificatesCtlog, default is Undefined, optional
        ctlog
    rekor : PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0VerifyImagesItems0AttestorsItems0EntriesItems0CertificatesRekor, default is Undefined, optional
        rekor
    """


    cert?: str

    certChain?: str

    ctlog?: PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0VerifyImagesItems0AttestorsItems0EntriesItems0CertificatesCtlog

    rekor?: PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0VerifyImagesItems0AttestorsItems0EntriesItems0CertificatesRekor


schema PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0VerifyImagesItems0AttestorsItems0EntriesItems0CertificatesCtlog:
    r"""
    CTLog (certificate timestamp log) provides a configuration for validation of Signed Certificate
    Timestamps (SCTs). If the value is unset, the default behavior by Cosign is used.

    Attributes
    ----------
    ignoreSCT : bool, default is Undefined, optional
        IgnoreSCT defines whether to use the Signed Certificate Timestamp (SCT) log to check for a certificate
        timestamp. Default is false. Set to true if this was opted out during signing.
    pubkey : str, default is Undefined, optional
        PubKey, if set, is used to validate SCTs against a custom source.
    """


    ignoreSCT?: bool

    pubkey?: str


schema PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0VerifyImagesItems0AttestorsItems0EntriesItems0CertificatesRekor:
    r"""
    Rekor provides configuration for the Rekor transparency log service. If an empty object
    is provided the public instance of Rekor (https://rekor.sigstore.dev) is used.

    Attributes
    ----------
    ignoreTlog : bool, default is Undefined, optional
        IgnoreTlog skips transparency log verification.
    pubkey : str, default is Undefined, optional
        RekorPubKey is an optional PEM-encoded public key to use for a custom Rekor.
        If set, this will be used to validate transparency log signatures from a custom Rekor.
    url : str, default is Undefined, required
        URL is the address of the transparency log. Defaults to the public Rekor log instance https://rekor.sigstore.dev.
    """


    ignoreTlog?: bool

    pubkey?: str

    url: str


schema PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0VerifyImagesItems0AttestorsItems0EntriesItems0Keyless:
    r"""
    Keyless is a set of attribute used to verify a Sigstore keyless attestor.
    See https://github.com/sigstore/cosign/blob/main/KEYLESS.md.

    Attributes
    ----------
    additionalExtensions : {str:str}, default is Undefined, optional
        AdditionalExtensions are certificate-extensions used for keyless signing.
    ctlog : PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0VerifyImagesItems0AttestorsItems0EntriesItems0KeylessCtlog, default is Undefined, optional
        ctlog
    issuer : str, default is Undefined, optional
        Issuer is the certificate issuer used for keyless signing.
    rekor : PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0VerifyImagesItems0AttestorsItems0EntriesItems0KeylessRekor, default is Undefined, optional
        rekor
    roots : str, default is Undefined, optional
        Roots is an optional set of PEM encoded trusted root certificates.
        If not provided, the system roots are used.
    subject : str, default is Undefined, optional
        Subject is the verified identity used for keyless signing, for example the email address.
    """


    additionalExtensions?: {str:str}

    ctlog?: PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0VerifyImagesItems0AttestorsItems0EntriesItems0KeylessCtlog

    issuer?: str

    rekor?: PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0VerifyImagesItems0AttestorsItems0EntriesItems0KeylessRekor

    roots?: str

    subject?: str


schema PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0VerifyImagesItems0AttestorsItems0EntriesItems0KeylessCtlog:
    r"""
    CTLog (certificate timestamp log) provides a configuration for validation of Signed Certificate
    Timestamps (SCTs). If the value is unset, the default behavior by Cosign is used.

    Attributes
    ----------
    ignoreSCT : bool, default is Undefined, optional
        IgnoreSCT defines whether to use the Signed Certificate Timestamp (SCT) log to check for a certificate
        timestamp. Default is false. Set to true if this was opted out during signing.
    pubkey : str, default is Undefined, optional
        PubKey, if set, is used to validate SCTs against a custom source.
    """


    ignoreSCT?: bool

    pubkey?: str


schema PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0VerifyImagesItems0AttestorsItems0EntriesItems0KeylessRekor:
    r"""
    Rekor provides configuration for the Rekor transparency log service. If an empty object
    is provided the public instance of Rekor (https://rekor.sigstore.dev) is used.

    Attributes
    ----------
    ignoreTlog : bool, default is Undefined, optional
        IgnoreTlog skips transparency log verification.
    pubkey : str, default is Undefined, optional
        RekorPubKey is an optional PEM-encoded public key to use for a custom Rekor.
        If set, this will be used to validate transparency log signatures from a custom Rekor.
    url : str, default is Undefined, required
        URL is the address of the transparency log. Defaults to the public Rekor log instance https://rekor.sigstore.dev.
    """


    ignoreTlog?: bool

    pubkey?: str

    url: str


schema PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0VerifyImagesItems0AttestorsItems0EntriesItems0Keys:
    r"""
    Keys specifies one or more public keys.

    Attributes
    ----------
    ctlog : PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0VerifyImagesItems0AttestorsItems0EntriesItems0KeysCtlog, default is Undefined, optional
        ctlog
    kms : str, default is Undefined, optional
        KMS provides the URI to the public key stored in a Key Management System. See:
        https://github.com/sigstore/cosign/blob/main/KMS.md
    publicKeys : str, default is Undefined, optional
        Keys is a set of X.509 public keys used to verify image signatures. The keys can be directly
        specified or can be a variable reference to a key specified in a ConfigMap (see
        https://kyverno.io/docs/writing-policies/variables/), or reference a standard Kubernetes Secret
        elsewhere in the cluster by specifying it in the format "k8s://<namespace>/<secret_name>".
        The named Secret must specify a key `cosign.pub` containing the public key used for
        verification, (see https://github.com/sigstore/cosign/blob/main/KMS.md#kubernetes-secret).
        When multiple keys are specified each key is processed as a separate staticKey entry
        (.attestors[*].entries.keys) within the set of attestors and the count is applied across the keys.
    rekor : PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0VerifyImagesItems0AttestorsItems0EntriesItems0KeysRekor, default is Undefined, optional
        rekor
    secret : PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0VerifyImagesItems0AttestorsItems0EntriesItems0KeysSecret, default is Undefined, optional
        secret
    signatureAlgorithm : str, default is "sha256", optional
        Specify signature algorithm for public keys. Supported values are sha224, sha256, sha384 and sha512.
    """


    ctlog?: PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0VerifyImagesItems0AttestorsItems0EntriesItems0KeysCtlog

    kms?: str

    publicKeys?: str

    rekor?: PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0VerifyImagesItems0AttestorsItems0EntriesItems0KeysRekor

    secret?: PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0VerifyImagesItems0AttestorsItems0EntriesItems0KeysSecret

    signatureAlgorithm?: str = "sha256"


schema PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0VerifyImagesItems0AttestorsItems0EntriesItems0KeysCtlog:
    r"""
    CTLog (certificate timestamp log) provides a configuration for validation of Signed Certificate
    Timestamps (SCTs). If the value is unset, the default behavior by Cosign is used.

    Attributes
    ----------
    ignoreSCT : bool, default is Undefined, optional
        IgnoreSCT defines whether to use the Signed Certificate Timestamp (SCT) log to check for a certificate
        timestamp. Default is false. Set to true if this was opted out during signing.
    pubkey : str, default is Undefined, optional
        PubKey, if set, is used to validate SCTs against a custom source.
    """


    ignoreSCT?: bool

    pubkey?: str


schema PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0VerifyImagesItems0AttestorsItems0EntriesItems0KeysRekor:
    r"""
    Rekor provides configuration for the Rekor transparency log service. If an empty object
    is provided the public instance of Rekor (https://rekor.sigstore.dev) is used.

    Attributes
    ----------
    ignoreTlog : bool, default is Undefined, optional
        IgnoreTlog skips transparency log verification.
    pubkey : str, default is Undefined, optional
        RekorPubKey is an optional PEM-encoded public key to use for a custom Rekor.
        If set, this will be used to validate transparency log signatures from a custom Rekor.
    url : str, default is Undefined, required
        URL is the address of the transparency log. Defaults to the public Rekor log instance https://rekor.sigstore.dev.
    """


    ignoreTlog?: bool

    pubkey?: str

    url: str


schema PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0VerifyImagesItems0AttestorsItems0EntriesItems0KeysSecret:
    r"""
    Reference to a Secret resource that contains a public key

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the secret. The provided secret must contain a key named cosign.pub.
    namespace : str, default is Undefined, required
        Namespace name where the Secret exists.
    """


    name: str

    namespace: str


schema PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecRulesItems0VerifyImagesItems0ImageRegistryCredentials:
    r"""
    ImageRegistryCredentials provides credentials that will be used for authentication with registry.

    Attributes
    ----------
    allowInsecureRegistry : bool, default is Undefined, optional
        AllowInsecureRegistry allows insecure access to a registry.
    providers : [str], default is Undefined, optional
        Providers specifies a list of OCI Registry names, whose authentication providers are provided.
        It can be of one of these values: default,google,azure,amazon,github.
    secrets : [str], default is Undefined, optional
        Secrets specifies a list of secrets that are provided for credentials.
        Secrets must live in the Kyverno namespace.
    """


    allowInsecureRegistry?: bool

    providers?: [str]

    secrets?: [str]


schema PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecValidationFailureActionOverridesItems0:
    r"""
    policy spaces upbound io v1alpha1 shared upbound policy spec validation failure action overrides items0

    Attributes
    ----------
    action : str, default is Undefined, optional
        ValidationFailureAction defines the policy validation failure action
    namespaceSelector : PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecValidationFailureActionOverridesItems0NamespaceSelector, default is Undefined, optional
        namespace selector
    namespaces : [str], default is Undefined, optional
        namespaces
    """


    action?: "audit" | "enforce" | "Audit" | "Enforce"

    namespaceSelector?: PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecValidationFailureActionOverridesItems0NamespaceSelector

    namespaces?: [str]


schema PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecValidationFailureActionOverridesItems0NamespaceSelector:
    r"""
    A label selector is a label query over a set of resources. The result of matchLabels and
    matchExpressions are ANDed. An empty label selector matches all objects. A null
    label selector matches no objects.

    Attributes
    ----------
    matchExpressions : [PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecValidationFailureActionOverridesItems0NamespaceSelectorMatchExpressionsItems0], default is Undefined, optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : {str:str}, default is Undefined, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
    """


    matchExpressions?: [PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecValidationFailureActionOverridesItems0NamespaceSelectorMatchExpressionsItems0]

    matchLabels?: {str:str}


schema PolicySpacesUpboundIoV1alpha1SharedUpboundPolicySpecValidationFailureActionOverridesItems0NamespaceSelectorMatchExpressionsItems0:
    r"""
    A label selector requirement is a selector that contains values, a key, and an operator that
    relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the label key that the selector applies to.
    operator : str, default is Undefined, required
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], default is Undefined, optional
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
    """


    key: str

    operator: str

    values?: [str]


schema PolicySpacesUpboundIoV1alpha1SharedUpboundPolicyStatus:
    r"""
    SharedUpboundPolicyStatus defines the observed state of the projected polcies.

    Attributes
    ----------
    failed : [PolicySpacesUpboundIoV1alpha1SharedUpboundPolicyStatusFailedItems0], default is Undefined, optional
        list of provisioning failures.
    observedGeneration : int, default is Undefined, optional
        observed resource generation.
    provisioned : [PolicySpacesUpboundIoV1alpha1SharedUpboundPolicyStatusProvisionedItems0], default is Undefined, optional
        List of successfully provisioned targets.
    """


    failed?: [PolicySpacesUpboundIoV1alpha1SharedUpboundPolicyStatusFailedItems0]

    observedGeneration?: int

    provisioned?: [PolicySpacesUpboundIoV1alpha1SharedUpboundPolicyStatusProvisionedItems0]


schema PolicySpacesUpboundIoV1alpha1SharedUpboundPolicyStatusFailedItems0:
    r"""
    SharedUpboundPolicyProvisioningFailure defines policy provisioning failure.

    Attributes
    ----------
    conditions : [PolicySpacesUpboundIoV1alpha1SharedUpboundPolicyStatusFailedItems0ConditionsItems0], default is Undefined, optional
        List of conditions.
    controlPlane : str, default is Undefined, required
        ControlPlane name where the failure occurred.
    """


    conditions?: [PolicySpacesUpboundIoV1alpha1SharedUpboundPolicyStatusFailedItems0ConditionsItems0]

    controlPlane: str


schema PolicySpacesUpboundIoV1alpha1SharedUpboundPolicyStatusFailedItems0ConditionsItems0:
    r"""
    Condition contains details for one aspect of the current state of this API Resource.

    Attributes
    ----------
    lastTransitionTime : str, default is Undefined, required
        lastTransitionTime is the last time the condition transitioned from one status to another.
        This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
    message : str, default is Undefined, required
        message is a human readable message indicating details about the transition.
        This may be an empty string.
    observedGeneration : int, default is Undefined, optional
        observedGeneration represents the .metadata.generation that the condition was set based upon.
        For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
        with respect to the current state of the instance.
    reason : str, default is Undefined, required
        reason contains a programmatic identifier indicating the reason for the condition's last transition.
        Producers of specific condition types may define expected values and meanings for this field,
        and whether the values are considered a guaranteed API.
        The value should be a CamelCase string.
        This field may not be empty.
    status : str, default is Undefined, required
        status of the condition, one of True, False, Unknown.
    $type : str, default is Undefined, required
        type of condition in CamelCase or in foo.example.com/CamelCase.
    """


    lastTransitionTime: str

    message: str

    observedGeneration?: int

    reason: str

    status: "True" | "False" | "Unknown"

    $type: str


    check:
        len(message) <= 32768
        observedGeneration >= 0 if observedGeneration not in [None, Undefined]
        len(reason) <= 1024
        len(reason) >= 1
        _regex_match(str(reason), r"^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$")
        len($type) <= 316
        _regex_match(str($type), r"^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$")


schema PolicySpacesUpboundIoV1alpha1SharedUpboundPolicyStatusProvisionedItems0:
    r"""
    SharedUpboundPolicyProvisioningSuccess defines policy provisioning success.

    Attributes
    ----------
    controlPlane : str, default is Undefined, required
        ControlPlane name where the external secret got successfully projected.
    """


    controlPlane: str


