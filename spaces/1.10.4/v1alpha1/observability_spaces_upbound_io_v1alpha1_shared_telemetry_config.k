"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""
import k8s.apimachinery.pkg.apis.meta.v1


schema SharedTelemetryConfig:
    r"""
    SharedTelemetryConfig defines a telemetry configuration over a set of ControlPlanes.

    Attributes
    ----------
    apiVersion : str, default is "observability.spaces.upbound.io/v1alpha1", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "SharedTelemetryConfig", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, optional
        metadata
    spec : ObservabilitySpacesUpboundIoV1alpha1SharedTelemetryConfigSpec, default is Undefined, required
        spec
    status : ObservabilitySpacesUpboundIoV1alpha1SharedTelemetryConfigStatus, default is Undefined, optional
        status
    """


    apiVersion: "observability.spaces.upbound.io/v1alpha1" = "observability.spaces.upbound.io/v1alpha1"

    kind: "SharedTelemetryConfig" = "SharedTelemetryConfig"

    metadata?: v1.ObjectMeta

    spec: ObservabilitySpacesUpboundIoV1alpha1SharedTelemetryConfigSpec

    status?: ObservabilitySpacesUpboundIoV1alpha1SharedTelemetryConfigStatus


schema ObservabilitySpacesUpboundIoV1alpha1SharedTelemetryConfigSpec:
    r"""
    SharedTelemetryConfigSpec defines a telemetry configuration over a set of ControlPlanes.

    Attributes
    ----------
    configPatchSecretRefs : [ObservabilitySpacesUpboundIoV1alpha1SharedTelemetryConfigSpecConfigPatchSecretRefsItems0], default is Undefined, optional
        ConfigPatchSecretRefs allows defining patches sourced from secrets to be
        applied to the telemetry configuration.
    controlPlaneSelector : ObservabilitySpacesUpboundIoV1alpha1SharedTelemetryConfigSpecControlPlaneSelector, default is Undefined, required
        control plane selector
    exportPipeline : ObservabilitySpacesUpboundIoV1alpha1SharedTelemetryConfigSpecExportPipeline, default is Undefined, required
        export pipeline
    exporters : any, default is Undefined, required
        Exporters defines the exporters to configure on the selected ControlPlanes.
        Untyped as we use the underlying OpenTelemetryOperator to configure the
        OpenTelemetry collector's exporters. Use the OpenTelemetry Collector
        documentation to configure the exporters.
        Currently only supported exporters are push based exporters.
    """


    configPatchSecretRefs?: [ObservabilitySpacesUpboundIoV1alpha1SharedTelemetryConfigSpecConfigPatchSecretRefsItems0]

    controlPlaneSelector: ObservabilitySpacesUpboundIoV1alpha1SharedTelemetryConfigSpecControlPlaneSelector

    exportPipeline: ObservabilitySpacesUpboundIoV1alpha1SharedTelemetryConfigSpecExportPipeline

    exporters: any


schema ObservabilitySpacesUpboundIoV1alpha1SharedTelemetryConfigSpecConfigPatchSecretRefsItems0:
    r"""
    ConfigPatchSecretRef defines a config patch sourced from a secret to be
    applied to the telemetry configuration.

    Attributes
    ----------
    key : str, default is Undefined, required
        Key in the secret from which to source the patch.
    name : str, default is Undefined, required
        Name of the secret.
    path : str, default is Undefined, required
        Path to the field in the telemetry configuration to patch.
        Currently, we only support patching exporters, so the path
        needs to start with "exporters".
    """


    key: str

    name: str

    path: str


schema ObservabilitySpacesUpboundIoV1alpha1SharedTelemetryConfigSpecControlPlaneSelector:
    r"""
    ControlPlaneSelector defines the selector for ControlPlanes on which to
    configure telemetry.

    Attributes
    ----------
    labelSelectors : [ObservabilitySpacesUpboundIoV1alpha1SharedTelemetryConfigSpecControlPlaneSelectorLabelSelectorsItems0], default is Undefined, optional
        A resource is matched if any of the label selector matches.
        In case when the list is empty, resource is matched too.
    names : [str], default is Undefined, optional
        A resource is selected if its metadata.name matches any of the provided names.
        In case when the list is empty, resource is matched too.
    """


    labelSelectors?: [ObservabilitySpacesUpboundIoV1alpha1SharedTelemetryConfigSpecControlPlaneSelectorLabelSelectorsItems0]

    names?: [str]


schema ObservabilitySpacesUpboundIoV1alpha1SharedTelemetryConfigSpecControlPlaneSelectorLabelSelectorsItems0:
    r"""
    A label selector is a label query over a set of resources. The result of matchLabels and
    matchExpressions are ANDed. An empty label selector matches all objects. A null
    label selector matches no objects.

    Attributes
    ----------
    matchExpressions : [ObservabilitySpacesUpboundIoV1alpha1SharedTelemetryConfigSpecControlPlaneSelectorLabelSelectorsItems0MatchExpressionsItems0], default is Undefined, optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : {str:str}, default is Undefined, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
    """


    matchExpressions?: [ObservabilitySpacesUpboundIoV1alpha1SharedTelemetryConfigSpecControlPlaneSelectorLabelSelectorsItems0MatchExpressionsItems0]

    matchLabels?: {str:str}


schema ObservabilitySpacesUpboundIoV1alpha1SharedTelemetryConfigSpecControlPlaneSelectorLabelSelectorsItems0MatchExpressionsItems0:
    r"""
    A label selector requirement is a selector that contains values, a key, and an operator that
    relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the label key that the selector applies to.
    operator : str, default is Undefined, required
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], default is Undefined, optional
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
    """


    key: str

    operator: str

    values?: [str]


schema ObservabilitySpacesUpboundIoV1alpha1SharedTelemetryConfigSpecExportPipeline:
    r"""
    ExportPipeline defines the telemetry exporter pipeline to configure on
    the selected ControlPlanes.

    Attributes
    ----------
    logs : [str], default is Undefined, optional
        Logs defines the logs exporter pipeline to configure on the
        selected ControlPlanes. The value has to be present in the
        spec.exporters field.
    metrics : [str], default is Undefined, optional
        Metrics defines the metrics exporter pipeline to configure on the
        selected ControlPlanes. The value has to be present in the
        spec.exporters field.
    traces : [str], default is Undefined, optional
        Traces defines the traces exporter pipeline to configure on the
        selected ControlPlanes. The value has to be present in the
        spec.exporters field.
    """


    logs?: [str]

    metrics?: [str]

    traces?: [str]


    check:
        len(logs) <= 10 if logs
        len(metrics) <= 10 if metrics
        len(traces) <= 10 if traces


schema ObservabilitySpacesUpboundIoV1alpha1SharedTelemetryConfigStatus:
    r"""
    SharedTelemetryConfigStatus represents the observed state of a SharedTelemetryConfig.

    Attributes
    ----------
    conditions : [ObservabilitySpacesUpboundIoV1alpha1SharedTelemetryConfigStatusConditionsItems0], default is Undefined, optional
        Conditions of the resource.
    failed : [ObservabilitySpacesUpboundIoV1alpha1SharedTelemetryConfigStatusFailedItems0], default is Undefined, optional
        list of provisioning failures.
    observedGeneration : int, default is Undefined, optional
        ObservedGeneration is the latest metadata.generation
        which resulted in either a ready state, or stalled due to error
        it can not recover from without human intervention.
    provisioned : [str], default is Undefined, optional
        List of successfully provisioned targets.
    selectedControlPlanes : [str], default is Undefined, optional
        SelectedControlPlanes represents the names of the selected ControlPlanes.
    """


    conditions?: [ObservabilitySpacesUpboundIoV1alpha1SharedTelemetryConfigStatusConditionsItems0]

    failed?: [ObservabilitySpacesUpboundIoV1alpha1SharedTelemetryConfigStatusFailedItems0]

    observedGeneration?: int

    provisioned?: [str]

    selectedControlPlanes?: [str]


schema ObservabilitySpacesUpboundIoV1alpha1SharedTelemetryConfigStatusConditionsItems0:
    r"""
    A Condition that may apply to a resource.

    Attributes
    ----------
    lastTransitionTime : str, default is Undefined, required
        LastTransitionTime is the last time this condition transitioned from one
        status to another.
    message : str, default is Undefined, optional
        A Message containing details about this condition's last transition from
        one status to another, if any.
    observedGeneration : int, default is Undefined, optional
        ObservedGeneration represents the .metadata.generation that the condition was set based upon.
        For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
        with respect to the current state of the instance.
    reason : str, default is Undefined, required
        A Reason for this condition's last transition from one status to another.
    status : str, default is Undefined, required
        Status of this condition; is it currently True, False, or Unknown?
    $type : str, default is Undefined, required
        Type of this condition. At most one of each condition type may apply to
        a resource at any point in time.
    """


    lastTransitionTime: str

    message?: str

    observedGeneration?: int

    reason: str

    status: str

    $type: str


schema ObservabilitySpacesUpboundIoV1alpha1SharedTelemetryConfigStatusFailedItems0:
    r"""
    SharedTelemetryConfigProvisioningFailure defines configuration provisioning failure.

    Attributes
    ----------
    conditions : [ObservabilitySpacesUpboundIoV1alpha1SharedTelemetryConfigStatusFailedItems0ConditionsItems0], default is Undefined, optional
        Conditions of the resource.
    controlPlane : str, default is Undefined, required
        ControlPlane name where the failure occurred.
    observedGeneration : int, default is Undefined, optional
        ObservedGeneration is the latest metadata.generation
        which resulted in either a ready state, or stalled due to error
        it can not recover from without human intervention.
    """


    conditions?: [ObservabilitySpacesUpboundIoV1alpha1SharedTelemetryConfigStatusFailedItems0ConditionsItems0]

    controlPlane: str

    observedGeneration?: int


schema ObservabilitySpacesUpboundIoV1alpha1SharedTelemetryConfigStatusFailedItems0ConditionsItems0:
    r"""
    A Condition that may apply to a resource.

    Attributes
    ----------
    lastTransitionTime : str, default is Undefined, required
        LastTransitionTime is the last time this condition transitioned from one
        status to another.
    message : str, default is Undefined, optional
        A Message containing details about this condition's last transition from
        one status to another, if any.
    observedGeneration : int, default is Undefined, optional
        ObservedGeneration represents the .metadata.generation that the condition was set based upon.
        For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
        with respect to the current state of the instance.
    reason : str, default is Undefined, required
        A Reason for this condition's last transition from one status to another.
    status : str, default is Undefined, required
        Status of this condition; is it currently True, False, or Unknown?
    $type : str, default is Undefined, required
        Type of this condition. At most one of each condition type may apply to
        a resource at any point in time.
    """


    lastTransitionTime: str

    message?: str

    observedGeneration?: int

    reason: str

    status: str

    $type: str


